<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Spencer's Blog</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2016-04-11T16:33:03-04:00</updated>
<id>/</id>
<author>
  <name>Spencer Smith</name>
  <uri>/</uri>
  <email>robertspencersmith@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Deploy Kubernetes w/ Ansible & Terraform]]></title>
 <link rel="alternate" type="text/html" href="/Terraform-Ansible-Kubernetes/" />
  <id>/Terraform-Ansible-Kubernetes</id>
  <published>2016-04-11T00:00:00-04:00</published>
  <updated>2016-04-11T00:00:00-04:00</updated>
  <author>
    <name>Spencer Smith</name>
    <uri></uri>
    <email>robertspencersmith@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Back after a pretty lengthy intermission! Today I want to talk about Kubernetes. I’ve recently had some clients that have been interested in running Docker containers in a production environment and, after some research and requirement gathering, we came to the conclusion that the functionality that they wanted was not easily provided with the Docker suite of tools. These are things like guaranteeing a number of replicas running at all times, easily creating endpoints and load balancers for the replicas created, and enabling more complex deployment methodologies like blue/green or rolling updates.&lt;/p&gt;

&lt;p&gt;As it turns out, all of this stuff is included to some extent or another with Kubernetes and we were able to recommend that they explore this option to see how it works out for them. Of course, recommending is the easy part, while implementation is decidedly more complex. The desire for the proof of concept was to enable multi-cloud deployments of Kubernetes, while also remaining within their pre-chosen set of tools like Amazon AWS, OpenStack, CentOS, Ansible, etc.. To accomplish this, we were able to create a Kubernetes deployment using Hashicorp’s Terraform, Ansible, OpenStack, and Amazon. This post will talk a bit about how to roll your own cluster by adapting what I’ve seen.&lt;/p&gt;

&lt;h2 id=&quot;why-would-i-want-to-do-this&quot;&gt;&lt;strong&gt;Why Would I Want to do This?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;This is totally a valid question. And the answer here is that you don’t… if you can help it. There are easier and more fully featured ways to deploy Kubernetes if you have open game on the tools to choose. As a recommendation, I would say that using Google Container Engine is by far the most supported and pain-free way to get started with Kubernetes. Following that, I would recommend using Amazon AWS and CoreOS as your operating system. Again, lots of people using these tools means that bugs and gotchas are well documented and easier to deal with. It should also be noted that there are OpenStack built-ins to create Kubernetes clusters, such as &lt;a href=&quot;https://wiki.openstack.org/wiki/Magnum&quot; target=&quot;_blank&quot;&gt;Magnum&lt;/a&gt;. Again, if you’re a one-cloud shop, this is likely easier than rolling your own.&lt;/p&gt;

&lt;p&gt;Alas, here we are and we’ll search for a way to get it done!&lt;/p&gt;

&lt;h2 id=&quot;what-pieces-are-in-play&quot;&gt;&lt;strong&gt;What Pieces are in Play?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;For the purposes of this walkthrough, there will be four pieces that you’ll need to understand:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;OpenStack&lt;/strong&gt; - An infrastructure as a service cloud platform. I’ll be using this in lieu of Amazon.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Terraform&lt;/strong&gt; - Terraform allows for automated creation of servers, external IPs, etc. across a multitude of cloud environments. This was a key choice to allow for a seamless transition to creating resources in both Amazon and OpenStack.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ansible&lt;/strong&gt; - Ansible is a configuration management platform that automates things like package installation and config file setup. We will use a set of Ansible playbooks called &lt;a href=&quot;https://github.com/kubespray/kargo&quot; target=&quot;_blank&quot;&gt;KubeSpray Kargo&lt;/a&gt; to setup Kubernetes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt; - And finally we get to K8s! All of the tools above will come together to give us a fully functioning cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;clone-kubesprays-kargo&quot;&gt;&lt;strong&gt;Clone KubeSpray’s Kargo&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;First we’ll want to pull down the Ansible playbooks we want to use.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If you’ve never installed Ansible, it’s quite easy on a Mac with &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install ansible&lt;/code&gt;. Other instructions &lt;a href=&quot;http://docs.ansible.com/ansible/intro_installation.html&quot; target=&quot;_blank&quot;&gt;can be found here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ensure git is also installed with &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install git&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a directory for all of your deployment files and change into that directory. I called mine ‘terra-spray’.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Issue &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone git@github.com:kubespray/kargo.git&lt;/code&gt;. A new directory called kargo will be created with the playbooks:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Spencers-MBP:terra-spray spencer&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls -lah
total 104
drwxr-xr-x  13 spencer  staff   442B Apr  6 12:48 .
drwxr-xr-x  12 spencer  staff   408B Apr  5 16:45 ..
drwxr-xr-x  15 spencer  staff   510B Apr  5 16:55 kargo&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Note that there are a plethora of different options available with Kargo. I highly recommend spending some time reading up on the project and the different playbooks out there in order to deploy the specific cluster type you may need.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;create-terraform-templates&quot;&gt;&lt;strong&gt;Create Terraform Templates&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We want to create two terraform templates, the first will create our OpenStack infrastructure, while the second will create an Ansible inventory file for kargo to use. Additionally, we will create a variable file where we can populate our desired OpenStack variables as needed. The Terraform syntax can look a bit daunting at first, but it starts to make sense as we look at it more and see it in action.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create all files with &lt;code class=&quot;highlighter-rouge&quot;&gt;touch 00-create-k8s-nodes.tf 01-create-inv.tf terraform.tfvars&lt;/code&gt; The &lt;code class=&quot;highlighter-rouge&quot;&gt;.tf&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.tfvars&lt;/code&gt; extension are terraform specific extensions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the variables file, &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform.tfvars&lt;/code&gt;, populate with the following information and update the variables to reflect your OpenStack installation:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;node-count&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;
internal-ip-pool&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;private&quot;&lt;/span&gt;
floating-ip-pool&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;public&quot;&lt;/span&gt;
image-name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ubuntu-14.04.2-LTS&quot;&lt;/span&gt;
image-flavor&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;m1.small&quot;&lt;/span&gt;
security-groups&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;default,k8s-cluster&quot;&lt;/span&gt;
key-pair&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;spencer-key&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Now we want to create our Kubernetes master and nodes using the variables described above. Open &lt;code class=&quot;highlighter-rouge&quot;&gt;00-create-k8s-nodes.tf&lt;/code&gt; and add the following:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;##Setup needed variables&lt;/span&gt;
variable &lt;span class=&quot;s2&quot;&gt;&quot;node-count&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
variable &lt;span class=&quot;s2&quot;&gt;&quot;internal-ip-pool&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
variable &lt;span class=&quot;s2&quot;&gt;&quot;floating-ip-pool&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
variable &lt;span class=&quot;s2&quot;&gt;&quot;image-name&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
variable &lt;span class=&quot;s2&quot;&gt;&quot;image-flavor&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
variable &lt;span class=&quot;s2&quot;&gt;&quot;security-groups&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
variable &lt;span class=&quot;s2&quot;&gt;&quot;key-pair&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##Create a single master node and floating IP&lt;/span&gt;
resource &lt;span class=&quot;s2&quot;&gt;&quot;openstack_compute_floatingip_v2&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;master-ip&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  pool &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.floating-ip-pool&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

resource &lt;span class=&quot;s2&quot;&gt;&quot;openstack_compute_instance_v2&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;k8s-master&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;k8s-master&quot;&lt;/span&gt;
  image_name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.image-name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  flavor_name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.image-flavor&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  key_pair &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.key-pair&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  security_groups &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;, var.security-groups)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  network &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.internal-ip-pool&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  floating_ip &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;openstack_compute_floatingip_v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.master-ip.address&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##Create desired number of k8s nodes and floating IPs&lt;/span&gt;
resource &lt;span class=&quot;s2&quot;&gt;&quot;openstack_compute_floatingip_v2&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;node-ip&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  pool &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.floating-ip-pool&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  count &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.node-count&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

resource &lt;span class=&quot;s2&quot;&gt;&quot;openstack_compute_instance_v2&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;k8s-node&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  count &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.node-count&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;k8s-node-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.index&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  image_name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.image-name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  flavor_name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.image-flavor&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  key_pair &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.key-pair&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  security_groups &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;, var.security-groups)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  network &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.internal-ip-pool&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  floating_ip &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(openstack_compute_floatingip_v2.node-ip.*.address, count.index)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Now, with what we have here, our infrastructure is provisioned on OpenStack. However, we want to get the information about our infrastructure into the Kargo playbooks to use as its Ansible inventory. Add the following to &lt;code class=&quot;highlighter-rouge&quot;&gt;01-create-inventory.tf&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;resource &lt;span class=&quot;s2&quot;&gt;&quot;null_resource&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ansible-provision&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  depends_on &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;openstack_compute_instance_v2.k8s-master&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;openstack_compute_instance_v2.k8s-node&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;##Create Masters Inventory&lt;/span&gt;
  provisioner &lt;span class=&quot;s2&quot;&gt;&quot;local-exec&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[kube-master]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;openstack_compute_instance_v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.k8s-master.name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; ansible_ssh_host=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;openstack_compute_floatingip_v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.master-ip.address&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;gt; kargo/inventory/inventory&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;##Create ETCD Inventory&lt;/span&gt;
  provisioner &lt;span class=&quot;s2&quot;&gt;&quot;local-exec&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[etcd]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;openstack_compute_instance_v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.k8s-master.name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; ansible_ssh_host=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;openstack_compute_floatingip_v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.master-ip.address&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;gt;&amp;gt; kargo/inventory/inventory&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;##Create Nodes Inventory&lt;/span&gt;
  provisioner &lt;span class=&quot;s2&quot;&gt;&quot;local-exec&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[kube-node]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;gt;&amp;gt; kargo/inventory/inventory&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  provisioner &lt;span class=&quot;s2&quot;&gt;&quot;local-exec&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,formatlist(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%s ansible_ssh_host=%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;, openstack_compute_instance_v2.k8s-node.*.name, openstack_compute_floatingip_v2.node-ip.*.address))&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;gt;&amp;gt; kargo/inventory/inventory&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  provisioner &lt;span class=&quot;s2&quot;&gt;&quot;local-exec&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[k8s-cluster:children]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;kube-node&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;kube-master&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;gt;&amp;gt; kargo/inventory/inventory&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This template certainly looks a little confusing, but what is happening is that Terraform is taking the information for the created Kubernetes masters and nodes and outputting the hostnames and IP addresses into the Ansible inventory format at a local path of ./kargo/inventory/inventory. A sample output looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kube-master]
k8s-master &lt;span class=&quot;nv&quot;&gt;ansible_ssh_host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx.xxx.xxx.xxx

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;etcd]
k8s-master &lt;span class=&quot;nv&quot;&gt;ansible_ssh_host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx.xxx.xxx.xxx

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kube-node]
k8s-node-0 &lt;span class=&quot;nv&quot;&gt;ansible_ssh_host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx.xxx.xxx.xxx
k8s-node-1 &lt;span class=&quot;nv&quot;&gt;ansible_ssh_host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx.xxx.xxx.xxx

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k8s-cluster:children]
kube-node
kube-master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;setup-openstack&quot;&gt;&lt;strong&gt;Setup OpenStack&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;You may have noticed in the Terraform section that we attached a &lt;code class=&quot;highlighter-rouge&quot;&gt;k8s-cluster&lt;/code&gt; security group in our variables file. You will need to set this security group up to allow for the necessary ports used by Kubernetes. Follow &lt;a href=&quot;https://coreos.com/kubernetes/docs/latest/kubernetes-networking.html#port-allocation&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; list and enter them into Horizon.&lt;/p&gt;

&lt;h2 id=&quot;hold-on-to-ya-butts&quot;&gt;&lt;strong&gt;Hold On To Ya Butts!&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Now that Terraform is setup, we &lt;em&gt;should&lt;/em&gt; be able to launch our cluster and have it provision using the Kargo playbooks we checked out. But first, one small BASH script to ensure things run in the proper order.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;cluster-up.sh&lt;/code&gt; and open it for editing. Paste the following:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##Create infrastructure and inventory file&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Creating infrastructure&quot;&lt;/span&gt;
terraform apply

&lt;span class=&quot;c&quot;&gt;##Run Ansible playbooks&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Quick sleep while instances spin up&quot;&lt;/span&gt;
sleep 120
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Ansible provisioning&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ANSIBLE_HOST_KEY_CHECKING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;False ansible-playbook -i kargo/inventory/inventory -u ubuntu -b kargo/cluster.yml&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice I included a two minute sleep to take care of some of the time when the nodes created by Terraform weren’t quite ready for an SSH session when Ansible started reaching out to them. Finally, update the &lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt; flag in the ansible-playbook command to the user that has SSH access to the OpenStack instances you have created. I used &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu&lt;/code&gt; because that’s the default SSH user for Ubuntu cloud images.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Source your OpenStack credentials file with &lt;code class=&quot;highlighter-rouge&quot;&gt;source /path/to/credfile.sh&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Launch the cluster with &lt;code class=&quot;highlighter-rouge&quot;&gt;./cluster-up.sh&lt;/code&gt;. The Ansible deployment will take quite a bit of time as the necessary packages are downloaded and setup.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Assuming all goes as planned, SSH into your Kubernetes master and issue &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl get-nodes&lt;/code&gt;:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;ubuntu@k8s-master:~$ &lt;/span&gt;kubectl get nodes
NAME         STATUS    AGE
k8s-node-0   Ready     1m
k8s-node-1   Ready     1m&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


    &lt;p&gt;&lt;a href=&quot;/Terraform-Ansible-Kubernetes/&quot;&gt;Deploy Kubernetes w/ Ansible &amp; Terraform&lt;/a&gt; was originally published by Spencer Smith at &lt;a href=&quot;&quot;&gt;Spencer's Blog&lt;/a&gt; on April 11, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Containerizing The Grid - BOINC on Docker]]></title>
 <link rel="alternate" type="text/html" href="/Containerizing-The-Grid/" />
  <id>/Containerizing-The-Grid</id>
  <published>2015-08-29T00:00:00-04:00</published>
  <updated>2015-08-29T00:00:00-04:00</updated>
  <author>
    <name>Spencer Smith</name>
    <uri></uri>
    <email>robertspencersmith@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Today, we’ll go on yet another trip through container land. I’ve found myself itching to throw anything and everything that I may run on a server into a container. It is so easy to create a Dockerfile, build my image, then deploy it wherever I want with Docker Machine that I tend to do it first thing when I have something new to run. Being able to write it once and have it run anywhere really is powerful stuff.&lt;/p&gt;

&lt;p&gt;So that said, I was reading a bit the other day about grid computing. You may have heard of some of the interesting grid projects like &lt;a href=&quot;http://setiathome.ssl.berkeley.edu/&quot;&gt;SETI@Home&lt;/a&gt;. The idea here is that if you have a machine that often sits idle, you can donate your CPU (and/or GPU) to do some number crunching for the cause. I was thinking to myself upon reading this that I have some VMs that sit around idle for quite a bit of time unless I’m actively prototyping something, so why not give this a shot? I was also surprised to learn that a lot of these projects have standardized on using the same software suite, called BOINC, and you just associate to the project of your choice at launch time for the application. Sounds like a nice idea for a container!&lt;/p&gt;

&lt;h2 id=&quot;choose-project&quot;&gt;&lt;strong&gt;Choose Project&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Pick which projects you’re interested in by starting at the &lt;a href=&quot;https://boinc.berkeley.edu/projects.php&quot;&gt;project page&lt;/a&gt; of BOINC’s website. I picked SETI@Home, Rosetta, and World Community Grid.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You’ll need to create accounts on all of the projects that you are interested in. Once completed, take note of the account keys for each. We will need them later.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;create-a-docker-image&quot;&gt;&lt;strong&gt;Create A Docker Image&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create a new Dockerfile in a directory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Initialize our Dockerfile by adding a FROM and MAINTAINER section. I picked a Ubuntu 14.04 base image to build off of.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FROM ubuntu:14.04
MAINTAINER Spencer Smith &amp;lt;robertspencersmith@gmail.com&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Next, we will install the BOINC client. Luckily, it is included in Ubuntu’s repos, so it isn’t very difficult.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;##Install BOINC&lt;/span&gt;
RUN apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y boinc-client&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;We will then want to set our working directory to be that of the BOINC client’s lib directory. This will allow our commands to complete successfully next.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;##Set working directory&lt;/span&gt;
WORKDIR /var/lib/boinc-client&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;We will now set the default command for our image. This command (which is admittedly a bit long) will start BOINC’s client service, sleep shortly, use the ‘boinccmd’ tool to attach a project, then tail out the stdout/stderr logs for the client. You may notice the ‘${boincurl}’ and ‘${boinckey}’ sections of the command. Those are environment variables that will point us to the project we wish to connect to. You will see these in use later when we launch our container.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;##Run BOINC by default. Expects env vars for url and account key&lt;/span&gt;
CMD /etc/init.d/boinc-client start; sleep 5; /usr/bin/boinccmd --project_attach &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;boincurl&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;boinckey&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;; tail -f /var/lib/boinc-client/std&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;That’s it for the Dockerfile. Save it and exit. Here’s the complete file:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FROM ubuntu:14.04
MAINTAINER Spencer Smith &amp;lt;robertspencersmith@gmail.com&amp;gt;

&lt;span class=&quot;c&quot;&gt;##Install BOINC&lt;/span&gt;
RUN apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y boinc-client

&lt;span class=&quot;c&quot;&gt;##Set working directory&lt;/span&gt;
WORKDIR /var/lib/boinc-client

&lt;span class=&quot;c&quot;&gt;##Run BOINC by default. Expects env vars for url and account key&lt;/span&gt;
CMD /etc/init.d/boinc-client start; sleep 5; /usr/bin/boinccmd --project_attach &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;boincurl&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;boinckey&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;; tail -f /var/lib/boinc-client/std&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;We can now build our image by running &lt;code class=&quot;highlighter-rouge&quot;&gt;docker build -t rsmitty/boinc .&lt;/code&gt; in the directory. Feel free to tag differently of course.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;start-crunching&quot;&gt;&lt;strong&gt;Start Crunching!&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Now that we have an image to use, let’s launch some containers.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, find your proper docker endpoint with &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine ls&lt;/code&gt;. I’ll be using my digital ocean docker host for this tutorial.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Spencers-MacBook-Pro:boinc spencer&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-machine ls
NAME      ACTIVE   DRIVER         STATE     URL                         SWARM
default            virtualbox     Stopped
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;-dev             digitalocean   Running   tcp://REDACTED:2376&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Set your docker environment variables to the proper values with&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker-machine env &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;-dev&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Launch a container, substituting your own desired values for boinckey and boincurl. You should be able to find these values from the account settings for the sites you registered earlier. Also feel free to name your container as you see fit.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -ti -d --name wcg -e &lt;span class=&quot;s2&quot;&gt;&quot;boincurl=www.worldcommunitygrid.org&quot;&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&quot;boinckey=1234567890&quot;&lt;/span&gt; rsmitty/boinc&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Once launched, we can peek in on our jobs by either allocating a new TTY to the container with &lt;code class=&quot;highlighter-rouge&quot;&gt;docker exec -ti wcg /bin/bash&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;docker logs wcg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Spencers-MacBook-Pro:boinc spencer&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker logs wcg
 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Starting BOINC core client: boinc                                     &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; OK &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Setting up scheduling &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;BOINC core client and children:

....

29-Aug-2015 15:48:49 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;World Community Grid] Started download of 933fbd61802442e2861afa0b31aedcc6.pdbqt
29-Aug-2015 15:48:51 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;World Community Grid] Finished download of 933fbd61802442e2861afa0b31aedcc6.pdbqt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it! You can check in on your accomplishments for each project in your account settings. You can find my image for this tutorial in the &lt;a href=&quot;https://hub.docker.com/r/rsmitty/boinc/&quot;&gt;Docker Hub&lt;/a&gt;. If you wish to learn more about the BOINC project itself, please visit their &lt;a href=&quot;https://boinc.berkeley.edu/&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/Containerizing-The-Grid/&quot;&gt;Containerizing The Grid - BOINC on Docker&lt;/a&gt; was originally published by Spencer Smith at &lt;a href=&quot;&quot;&gt;Spencer's Blog&lt;/a&gt; on August 29, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Creating RancherOS Image for OpenStack]]></title>
 <link rel="alternate" type="text/html" href="/Creating-A-RancherOS-QCOW/" />
  <id>/Creating-A-RancherOS-QCOW</id>
  <published>2015-07-15T00:00:00-04:00</published>
  <updated>2015-07-15T00:00:00-04:00</updated>
  <author>
    <name>Spencer Smith</name>
    <uri></uri>
    <email>robertspencersmith@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;As I’ve been learning more about the container ecosystem, I’ve come across the concept of JeOS (just enough operating system). The idea here is that you want to gain as much performance out of your Docker containers as possible, so you minimize the cruft from your host operating system. There are several different JeOS options, but today we’ll talk about RancherOS. RancherOS is a very small, ~20MB, OS that you can use as a Docker host. Everything in RancherOS runs inside of a container and Docker itself runs as pid 1. RancherOS ships as an ISO, so today, I’ll guide you through using the ISO to create a QCOW image for use in OpenStack.&lt;/p&gt;

&lt;h2 id=&quot;setup-kvm&quot;&gt;&lt;strong&gt;Setup KVM&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;First, ensure you have a proper KVM environment setup. This can involve quite a bit of configuration between making sure virtualization is allowed in the BIOS, your CPU supports it, etc.. I followed &lt;a href=&quot;https://help.ubuntu.com/community/KVM/Installation&quot;&gt;these&lt;/a&gt; directions on a new Ubuntu machine and it worked just fine.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can test that your KVM setup is working properly by issuing &lt;code class=&quot;highlighter-rouge&quot;&gt;virsh list&lt;/code&gt;. That should return an empty list:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@ubuntu:/home/rsmitty# &lt;/span&gt;virsh list
 Id    Name                           State
----------------------------------------------------&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Finally, install the virt-install tool with &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install virtinst&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;install-packer&quot;&gt;&lt;strong&gt;Install Packer&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Now, we want to use Packer to build our image so we need to download it and get it installed properly. You can find directions on setting up Packer &lt;a href=&quot;https://www.packer.io/docs/installation.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you need an intro to Packer in general, I’ve written another guide that was published to the Solinea website. You can find that &lt;a href=&quot;http://www.solinea.com/blog/image-creation-packer-and-openstack&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;create-our-templates&quot;&gt;&lt;strong&gt;Create Our Templates&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Now that we are all set up, we need to create two files, a cloud-config.yml file that gets injected into RancherOS and a Packer template called kvm-rancheros.json that we’ll use to build our QCOW.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a file called cloud-config.yml with the following content. Be sure to modify the ssh public key with your own, so that it gets baked into the image. Unfortunately, there’s no injection of keys during boot in OpenStack for RancherOS, so take care to make sure you get the correct one in there. Here’s what my cloud-config.yml looked like:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#cloud-config&lt;/span&gt;

ssh_authorized_keys:
  - ssh-rsa ... spencer@Spencers-MacBook-Pro.local&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;There are lots of options for building images with Packer, so it can be a bit daunting at first. For our purposes, we will need to use the KVM builder directly and pass in the RancherOS ISO. Once booted, Packer will scp our cloud-config.yml file into the temporary instance and then issue the proper command to install RancherOS to disk. After this is complete, Packer will provide output on the location of the QCOW image. This image will simply be called “rancheros” and that path to it will be “$PWD/output_rancher/rancheros”. Here’s the full template:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;builders&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qemu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;iso_url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://releases.rancher.com/os/latest/rancheros.iso&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;iso_checksum_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;md5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;iso_checksum&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;63b54370f8c5f8645d6088be15ab07b0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;output_directory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;output_rancheros&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ssh_wait_timeout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;30s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;shutdown_command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudo shutdown -h now&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;disk_size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qcow2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;headless&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;accelerator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kvm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ssh_username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rancher&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ssh_password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rancher&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ssh_port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ssh_wait_timeout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;90m&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;vm_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rancheros&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;net_device&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;virtio-net&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;disk_interface&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;virtio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;boot_wait&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;qemuargs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-m&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1024M&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;provisioners&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cloud_config.yml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;destination&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home/rancher/cloud_config.yml&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;inline&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sleep 5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudo rancheros-install -f -c cloud_config.yml -d /dev/vda&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Notice the ‘-m’ flag in the qemuargs section. You MUST have at least 1GB of RAM to complete the install successfully.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;build-and-upload&quot;&gt;&lt;strong&gt;Build and Upload&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;It’s now time to build our image. Packer will fetch and verify the RancherOS ISO for us and proceed to take care of all of the necessary commands. Issue &lt;code class=&quot;highlighter-rouge&quot;&gt;packer build kvm-rancheros.json&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once our build is complete, we’ll want to upload it to Glance. This image is ~40MB, so it shouldn’t take a terribly long time. You can issue the following command (after sourcing your OpenStack credentials):&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;glance image-create --name &lt;span class=&quot;s2&quot;&gt;&quot;RancherOS&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--is-public &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; --disk-format qcow2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--container-format bare --file &lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;/output_rancher/rancheros&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;launch-an-instance--connect&quot;&gt;&lt;strong&gt;Launch An Instance &amp;amp; Connect&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;We can now spin up our RancherOS instance inside of OpenStack. Ensure that you have ports 22, 80, and 2376 allowed in the security group that you choose to use for your instance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once our instance has been created, we will use Docker Machine’s generic driver to connect to our launched instance. Again, because SSH keys aren’t injected into RancherOS, we can’t use the OpenStack driver for Docker Machine and have it launch the instance for us. Here is the command that I used for connecting Docker Machine, notice I passed the path to the SSH key I injected earlier.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-machine create -d generic --generic-ssh-user rancher &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--generic-ssh-key ~/.ssh/id_rsa --generic-ip-address 192.168.1.202 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
rancher-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Set rancher-dev as our Docker endpoint with the following:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker-machine env rancher-dev&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;You can ensure everything is connected with a combination of &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine ls&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt;. I like to echo a dashed line to give some separation in my commands.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;spencers-mbp:~ spencer&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-machine ls &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;------------&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker ps
NAME          ACTIVE   DRIVER         STATE     URL                         SWARM
rancher-dev   &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;        generic        Running   tcp://192.168.1.202:2376
vbox-dev               virtualbox     Running   tcp://192.168.99.100:2376
------------
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;grow-the-root-volume--deploy-a-container&quot;&gt;&lt;strong&gt;Grow The Root Volume &amp;amp; Deploy A Container&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Again, keep in mind that RancherOS doesn’t currently do some cloud-init functions like growing the root volume. We’ll need to launch a privileged container to do this. Issue the following:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run --privileged -i --rm ubuntu bash &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt; EOF
apt-get update
apt-get install -y cloud-guest-utils parted
growpart /dev/vda 1
partprobe
resize2fs /dev/vda1
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Credit to Darren Shepherd for this script mentioned &lt;a href=&quot;https://github.com/rancher/os/issues/232&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Launch my test-webserver container by issuing the following:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -d -p 80:80 rsmitty/test-webserver /usr/sbin/apache2ctl -D FOREGROUND&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Check out the result!
&lt;a href=&quot;/img/posts/2015-07-15-Creating-A-RancherOS-QCOW/Running-Container.png&quot;&gt;
&lt;img src=&quot;/img/posts/2015-07-15-Creating-A-RancherOS-QCOW/Running-Container.png&quot; style=&quot;max-width75%; border:solid 1px;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


    &lt;p&gt;&lt;a href=&quot;/Creating-A-RancherOS-QCOW/&quot;&gt;Creating RancherOS Image for OpenStack&lt;/a&gt; was originally published by Spencer Smith at &lt;a href=&quot;&quot;&gt;Spencer's Blog&lt;/a&gt; on July 15, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Removing Cruft From Docker]]></title>
 <link rel="alternate" type="text/html" href="/Removing-Cruft-From-Docker/" />
  <id>/Removing-Cruft-From-Docker</id>
  <published>2015-07-10T00:00:00-04:00</published>
  <updated>2015-07-10T00:00:00-04:00</updated>
  <author>
    <name>Spencer Smith</name>
    <uri></uri>
    <email>robertspencersmith@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;This post is simply here to document how to remove untagged and exited images and containers.&lt;/p&gt;

&lt;h2 id=&quot;exited-images&quot;&gt;&lt;strong&gt;Exited Images&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;You can find previously exited images by using filters:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker ps -f &lt;span class=&quot;s2&quot;&gt;&quot;status=exited&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will return the full text for each exited container:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Spencers-MacBook-Pro:~ spencer&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker ps -f &lt;span class=&quot;s2&quot;&gt;&quot;status=exited&quot;&lt;/span&gt;
CONTAINER ID        IMAGE                                           COMMAND                CREATED             STATUS                      PORTS               NAMES
72b10aebd2b0        rsmitty/ostack                                                     &lt;span class=&quot;s2&quot;&gt;&quot;/bin/sh -c /bin/bas   9 hours ago         Exited (126) 9 hours ago                        distracted_wilson
aa6c9cfc662f        rsmitty/ostack                                                     &quot;&lt;/span&gt;/bin/sh -c /bin/bas   9 hours ago         Exited &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 9 hours ago                          sick_einstein
1bfce6a324b5        ubuntu:14.04                                                       &lt;span class=&quot;s2&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;            9 hours ago                                                         jovial_einstein&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To remove all of them, you can nest a command similar to the one above inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker rm&lt;/code&gt; command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker rm &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker ps -qf &lt;span class=&quot;s2&quot;&gt;&quot;status=exited&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Docker responds with a list of IDs that it deleted:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Spencers-MacBook-Pro:~ spencer&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker rm &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker ps -qf &lt;span class=&quot;s2&quot;&gt;&quot;status=exited&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
72b10aebd2b0
aa6c9cfc662f
1bfce6a324b5
f7fd1c00837c&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;untagged-images&quot;&gt;&lt;strong&gt;Untagged Images&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;If you wish to clean up untagged instances you can find them with another filter command, similar to the one above:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker images -f &lt;span class=&quot;s2&quot;&gt;&quot;dangling=true&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will return a formatted list of the untagged images:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Spencers-MacBook-Pro:~ spencer&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker images -f &lt;span class=&quot;s2&quot;&gt;&quot;dangling=true&quot;&lt;/span&gt;
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
&lt;span class=&quot;gp&quot;&gt;&amp;lt;none&amp;gt;              &lt;/span&gt;&amp;lt;none&amp;gt;              bfa68ad8ff4c        23 hours ago        457.1 MB
&lt;span class=&quot;gp&quot;&gt;&amp;lt;none&amp;gt;              &lt;/span&gt;&amp;lt;none&amp;gt;              0043ceae2104        23 hours ago        457.1 MB
&lt;span class=&quot;gp&quot;&gt;&amp;lt;none&amp;gt;              &lt;/span&gt;&amp;lt;none&amp;gt;              edff0ab07895        23 hours ago        421.3 MB
&lt;span class=&quot;gp&quot;&gt;&amp;lt;none&amp;gt;              &lt;/span&gt;&amp;lt;none&amp;gt;              6ae539b22ab9        23 hours ago        421 MB&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And again, nesting a variation of that command to actually do the cleanup:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker rmi &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker images -qf &lt;span class=&quot;s2&quot;&gt;&quot;dangling=true&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now something interesting happens!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Spencers-MacBook-Pro:~ spencer&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker rmi &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker images -qf &lt;span class=&quot;s2&quot;&gt;&quot;dangling=true&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
Error response from daemon: Conflict, cannot delete bfa68ad8ff4c because the running container 7e5c96166fcb is using it, stop it and use -f to force
Deleted: edff0ab0789548cf33db3589eae5cc93589e7aea379bc3383f58c00b71ebb8cb
Deleted: e619828bd6f049d81a1920b96634534044ab0bf8f1dd4e40d9daf82d9a5c80b6
Deleted: ac0a2e7c0897058649e9e31cd4a319ee08158646990a607a54a0492f27e6e275
Error: failed to remove images: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bfa68ad8ff4c]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the images are in use by some container, you must first stop the container. You’ll have to resolve this in order to remove this image. This is a good thing though, it can keep you from blowing yourself up :)&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/Removing-Cruft-From-Docker/&quot;&gt;Removing Cruft From Docker&lt;/a&gt; was originally published by Spencer Smith at &lt;a href=&quot;&quot;&gt;Spencer's Blog&lt;/a&gt; on July 10, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[I'll Take Mine To Go - Bundling OpenStack Client CLIs Into A Container]]></title>
 <link rel="alternate" type="text/html" href="/Bundling-OpenStack-CLI-Into-a-Container/" />
  <id>/Bundling-OpenStack-CLI-Into-a-Container</id>
  <published>2015-07-10T00:00:00-04:00</published>
  <updated>2015-07-10T00:00:00-04:00</updated>
  <author>
    <name>Spencer Smith</name>
    <uri></uri>
    <email>robertspencersmith@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;This one’s a weird one. I was trying to figure out some interesting containers to build when I overheard someone at work expressing difficulty trying to install the OpenStack client CLIs onto his machine. I thought to myself, what if I could install these once and just push them to whatever environment I please? Or even share it with other folks to use? Here’s how you can do it:&lt;/p&gt;

&lt;h2 id=&quot;create-a-dockerfile&quot;&gt;&lt;strong&gt;Create A Dockerfile&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;First I got the basics down for creating a Dockerfile to install the proper CLI packages. It was handy to simply boot a ubuntu:14.04 container and test these steps out manually first. That’s an easy one, just do:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -ti ubuntu:14.04 /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From that point I did a little trial and error to figure out the basics of installing pip, installing the openstack client packages inside of pip, and throwing in a few extra dependencies that I encountered. Here’s the full Docker file, we’ll talk about the script that gets added in next:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FROM ubuntu:14.04
MAINTAINER Spencer Smith &amp;lt;robertspencersmith@gmail.com&amp;gt;

&lt;span class=&quot;c&quot;&gt;##Install pip and necessary dependencies for clients&lt;/span&gt;
RUN apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get -y upgrade
RUN apt-get install -y python-dev&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    python-pip&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    libffi-dev&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    libssl-dev

&lt;span class=&quot;c&quot;&gt;##Install ssl patches for python 2.7, then install clients&lt;/span&gt;
RUN pip install six --upgrade&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    pyopenssl&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    ndg-httpsclient&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    pyasn1&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    python-ceilometerclient&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    python-cinderclient&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    python-glanceclient&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    python-heatclient&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    python-keystoneclient&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    python-neutronclient&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    python-novaclient&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    python-saharaclient&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    python-swiftclient&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    python-troveclient&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    python-openstackclient

&lt;span class=&quot;c&quot;&gt;##Upload our creds checker and set it as our entrypoint&lt;/span&gt;
ADD creds.sh /ostack/
CMD /ostack/creds.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;deal-with-credentials&quot;&gt;&lt;strong&gt;Deal With Credentials&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;After creating the Dockerfile, I wanted to make sure that I could create a container general enough for others to use if they wanted. As such, I wanted most of the normal OpenStack environment variables to be passed in through the command line arguments. To handle this, I wrote a quick bash script called creds.sh to add into the container.&lt;/p&gt;

&lt;p&gt;The creds.sh file will just ensure that the OS_AUTH_URL, OS_REGION_NAME, OS_TENANT_NAME, and OS_USERNAME variables are present in the environment, then it will prompt the user for their password so that they don’t have to put it in plaintext inside the docker run command. Finally, once all the info is present, the script will simply launch a bash session for the user.&lt;/p&gt;

&lt;p&gt;Here’s the full creds.sh script:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##Ensure everything but password is passed in as env variable&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;var &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;OS_AUTH_URL OS_REGION_NAME OS_TENANT_NAME OS_USERNAME; &lt;span class=&quot;k&quot;&gt;do
  if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; -z &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!var&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is unset. Please pass as a env variable input!&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
  &lt;span class=&quot;k&quot;&gt;fi
done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##Prompt for password input&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Please enter your OpenStack Password: &quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; -sr OS_PASSWORD_INPUT
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OS_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$OS_PASSWORD_INPUT&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##Start a bash prompt&lt;/span&gt;
/bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;build-the-container&quot;&gt;&lt;strong&gt;Build The Container&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Now, we simply need to build our container. You can give this your own tag if you like. Here’s what my &lt;code class=&quot;highlighter-rouge&quot;&gt;docker build&lt;/code&gt; command looked like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker build -t rsmitty/ostack .&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ensure you are in the same directory with your Dockerfile.&lt;/p&gt;

&lt;h2 id=&quot;use-it&quot;&gt;&lt;strong&gt;Use It!&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;We can now launch our container and use it to talk to an OpenStack cloud. Ensure that the proper environment variables are passed in using the &lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt; flag. Here’s what my &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt; command looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -ti -e &lt;span class=&quot;nv&quot;&gt;OS_AUTH_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://REDACTED_URL:5000/v2.0/ -e &lt;span class=&quot;nv&quot;&gt;OS_REGION_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;RegionOne -e &lt;span class=&quot;nv&quot;&gt;OS_TENANT_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;admin -e &lt;span class=&quot;nv&quot;&gt;OS_USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;spencer rsmitty/ostack&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once the run has put you in the bash prompt, you should be able to use your environment!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@ecedc1a96a49:/# &lt;/span&gt;cinder list
+--------------------------------------+-----------+--------------+------+-------------+----------+-------------+
|                  ID                  |   Status  | Display Name | Size | Volume Type | Bootable | Attached to |
+--------------------------------------+-----------+--------------+------+-------------+----------+-------------+
| 2032053f-9809-4c29-b8f2-731fef7a01db | available |     &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;     |  2   |    iscsi    |  &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;   |             |
+--------------------------------------+-----------+--------------+------+-------------+----------+-------------+&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


    &lt;p&gt;&lt;a href=&quot;/Bundling-OpenStack-CLI-Into-a-Container/&quot;&gt;I&#39;ll Take Mine To Go - Bundling OpenStack Client CLIs Into A Container&lt;/a&gt; was originally published by Spencer Smith at &lt;a href=&quot;&quot;&gt;Spencer's Blog&lt;/a&gt; on July 10, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[How Do I Docker? - Quick Dev Environments with Docker Machine and Openstack]]></title>
 <link rel="alternate" type="text/html" href="/Docker-Machine-and-Openstack/" />
  <id>/Docker-Machine-and-Openstack</id>
  <published>2015-06-23T00:00:00-04:00</published>
  <updated>2015-06-23T00:00:00-04:00</updated>
  <author>
    <name>Spencer Smith</name>
    <uri></uri>
    <email>robertspencersmith@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;This post will go into some detail about how to get started with docker-machine. Docker Machine is a really nice tool to aid in deploying docker hosts across any environment. It seems to be quickly becoming the standard for creating dev environments. Today, I’ll go through how to talk to OpenStack with Docker Machine and then deploy a quick container.&lt;/p&gt;

&lt;h2 id=&quot;install-docker-machine&quot;&gt;&lt;strong&gt;Install Docker Machine&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;I installed both Docker and Docker Machine with Homebrew. There are several other installation options that you can find in the “Installation” sections &lt;a href=&quot;https://docs.docker.com/mac/started/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://docs.docker.com/machine/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For Homebrew, simply issue this in the terminal:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install docker-machine&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;prepare-openstack&quot;&gt;&lt;strong&gt;Prepare Openstack&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;There’s a few things that we need to do on the OpenStack side in order to ensure that our machine can be created successfully. First, go ahead and source your keystone credentials. Docker Machine will use these environment variables if they are present. This keeps us from having to pass a bunch of authentication parameters later on.&lt;/p&gt;

&lt;p&gt;Next, take a look at your OpenStack environment. We’ll need to gather up some IDs and ensure some things are setup properly. First, take a look at your security group that you plan to use and ensure that SSH access is allowed into it. It’s also important to note here that you’ll want to allow any ports that you plan to map into your containers. For me, I allowed ports 22 and 80 initially. Now, let’s gather some IDs. I needed to find the ssh user for my image type (Centos 7), the image ID, the flavor I wished to use, the floating-ip pool name, and finally the security group that I wanted to use.&lt;/p&gt;

&lt;h2 id=&quot;create-our-machine&quot;&gt;&lt;strong&gt;Create Our Machine&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;We’re finally ready to create our machine. Using the IDs I found above, here is the (extremely verbose) command that I issued:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-machine create --driver openstack&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --openstack-ssh-user centos&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --openstack-image-id cfb0a24a-16a5-4d19-a15b-ee29c9375d52&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --openstack-flavor-name m1.small&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --openstack-floatingip-pool public&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --openstack-sec-groups default&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 docker-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Be patient here. I found that creating the machine took quite a while, as the docker-machine command will SSH into the instance and do some long-running tasks like ‘yum upgrade’.&lt;/p&gt;

&lt;p&gt;Once complete, we’ll want to override our built in docker settings to point to our new machine. We can do that by issuing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker-machine env docker-dev&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we’ll want to ensure that our machine is totally up to date by issuing the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-machine upgrade docker-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;write-a-test-container&quot;&gt;&lt;strong&gt;Write A Test Container&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Now that we have a working Docker Machine in OpenStack, let’s try deploying something fun to it. First, we’ll create a Dockerfile to simply install Apache and push a little image and a webpage.&lt;/p&gt;

&lt;p&gt;In a test directory, I created three files: Dockerfile, index.html, and logo.png. Here’s the contents of each file:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dockerfile:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FROM ubuntu:14.04
MAINTAINER Spencer Smith &amp;lt;robertspencersmith@gmail.com&amp;gt;
RUN apt-get update
RUN apt-get install -y apache2
ADD index.html /var/www/html/index.html
ADD logo.png /var/www/html/logo.png
RUN chmod 777 /var/www/html/logo.png&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;index.html:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;logo.png&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Hello, World!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;logo.png:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/posts/2015-06-23-docker-machine-and-openstack/dockermachine.png&quot;&gt;
&lt;img src=&quot;/img/posts/2015-06-23-docker-machine-and-openstack/dockermachine.png&quot; style=&quot;max-width:20%; border:solid 1px;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we’ll build our container image. Change into the directory that contains the files we just created and issue docker build. I’m also supplying a tag so that I can easily identify my apache container that I’m building. The docker build command can take a little while to complete, as there’s a lot happening with the update and installation of apache2.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker build -t rsmitty/apache .&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;test-it-out&quot;&gt;&lt;strong&gt;Test It Out&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Now that our image has been created, it’s time to test it out by launching our new container in our machine. We can do that simply by calling the docker run command. Note that we will launch apache in the foreground so that it continues running and keeps our container up.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -d -p 80:80 rsmitty/apache /usr/sbin/apache2ctl -D FOREGROUND&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Point your browser to the IP address of our machine and see the results!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/posts/2015-06-23-docker-machine-and-openstack/container-running.png&quot;&gt;
&lt;img src=&quot;/img/posts/2015-06-23-docker-machine-and-openstack/container-running.png&quot; style=&quot;max-width75%; border:solid 1px;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/Docker-Machine-and-Openstack/&quot;&gt;How Do I Docker? - Quick Dev Environments with Docker Machine and Openstack&lt;/a&gt; was originally published by Spencer Smith at &lt;a href=&quot;&quot;&gt;Spencer's Blog&lt;/a&gt; on June 23, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Installing Docker]]></title>
 <link rel="alternate" type="text/html" href="/Installing-Docker/" />
  <id>/Installing-Docker</id>
  <published>2015-03-29T00:00:00-04:00</published>
  <updated>2015-03-29T00:00:00-04:00</updated>
  <author>
    <name>Spencer Smith</name>
    <uri></uri>
    <email>robertspencersmith@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Today, I’m going to detail my steps for installing Docker. Docker is an extension of Linux Containers (LXC) and aims to provide an easier to use environment. This will just be a basic install guide and I will write another post soon, once I figure out how to do some more interesting stuff.&lt;/p&gt;

&lt;p&gt;Docker and LXC are interesting because you can run several isolated containers directly in userspace on a Linux host. One of the big advantages here is that no hypervisor is required and you don’t need a guest OS like with VMs. This means that containers can be created scarily fast and should be more performant than their VM counterparts. I’ve seen some debate about whether or not containers are as secure as plain VMs, but truthfully haven’t delved too deeply into the details around this. Docker is a project I’ve been following at a high level for a while because of the potential to hook it into Openstack, but I’m just now getting around to actually putting my hands on it.&lt;/p&gt;

&lt;h2 id=&quot;setup-a-host&quot;&gt;&lt;strong&gt;Setup a Host&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Setting up a host for your Docker containers is pretty easy. Docker is able to run on pretty much any environment. I’m going to use Vagrant CentOS 6.5 box, but you can find other install instructions &lt;a href=&quot;https://docs.docker.com/installation/#installation&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker is part of the EPEL repo, so let’s install that with:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo yum -y install epel-release&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Once that’s complete, let’s update all or our packages. I found that I couldn’t start the Docker daemon without updating. There’s a device mapper package that has to be a newer version. After doing this, we can simply install Docker with:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo yum -y update
sudo yum -y install docker-io&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Start the Docker daemon and configure it to run at boot:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo service docker start
sudo chkconfig docker on&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Pull in the CentOS 6 base container. This may take a bit of time depending on your internet connection.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo docker pull centos:centos6&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Now let’s test that it works by asking docker to run a command inside a container. The run command below will create a container, issue the echo command, then shut the container down.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo docker run centos:centos6 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hola, Mundo!&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

    &lt;p&gt;&lt;a href=&quot;/Installing-Docker/&quot;&gt;Installing Docker&lt;/a&gt; was originally published by Spencer Smith at &lt;a href=&quot;&quot;&gt;Spencer's Blog&lt;/a&gt; on March 29, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Hosting Git Repos]]></title>
 <link rel="alternate" type="text/html" href="/Hosting-Git-Repos/" />
  <id>/Hosting-Git-Repos</id>
  <published>2015-03-27T00:00:00-04:00</published>
  <updated>2015-03-27T00:00:00-04:00</updated>
  <author>
    <name>Spencer Smith</name>
    <uri></uri>
    <email>robertspencersmith@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;This post will detail how to host git repos on a server that you own. I’ll be covering how to set up your sever-side repo and then how to connect from a remote machine via SSH.&lt;/p&gt;

&lt;h2 id=&quot;setup-our-server&quot;&gt;&lt;strong&gt;Setup Our Server&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;First and foremost, we’ll need to install git. This is going to depend on your package manager, but I’m using CentOS right now, so I’ll be issuing&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo yum install -y git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Now we’ll need to add a user to our system for git. Let’s do that and then switch to that user with:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo useradd git
sudo su - git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Now that we are the git user, we can setup the SSH keys that we want to accept by making the authorized keys file and putting the public keys of each user we want to have access in this file. After creating this directory and file, we need to set the permissions on them properly or SSH will complain.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir -p ~/.ssh
touch ~/.ssh/authorized_keys
chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Add the desired public SSH keys in authorized keys. You can add several of these if you have a desire for several users to have access to this git repo. Just separate the keys by putting them on a new line. This should look something like:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHytEnXVEiGKu6XVDh/evJhM5ANngMeRJiizr6jsiOmWyMtuuqtGi/84EDQ54OOwDlBfdC72YjPaYEafyez8fYls7M2L82P2Ka96hFapUWwF9TzxAw1yEkV81Rv2OZWpAdf451UCZPClludtym0DyGwZdMGfVJx8ZNPJ61lwx5ijwWQvY4dhZF0Hjo431c9d1mgOLxu94WJ15PC6CjAI9zh/zddmJMHgClkqTuGWWf/t3e/SZ8AJ5ABUtcjPutUdJBGvPI814eD3+JgE18D6AiHN/uWm0JLYx5P06htqb2Eb6uAsCJjTIDyl+I0bOYRUp8PlYzJALv+x8RxP1R35Wr rsmitty@github.com&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;create-git-repo&quot;&gt;&lt;strong&gt;Create Git Repo&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;It’s time to finally create our git repo. Let’s create an easy directory called /git/ and a subdirectory under that for our test project. We need to switch back to our normal user (with sudo ability) to create a directory at the root. You can do that simply by issuing ‘exit’.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo mkdir -p /git/testproject.git
sudo chown -R git:git /git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Now, back as the git user, initialize the git repo by using the ‘git init’ command inside that directory:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /git/testproject.git
git init --bare&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;test-it-out&quot;&gt;&lt;strong&gt;Test It Out&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Back on your local machine, let’s verify that this is actually working for us. This should be as simple as doing a git clone to the proper path on the remote server:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone git@GITSERVERNAME:/git/testproject.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Change into the local testproject directory and create a file for our first commit:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;touch README.md&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Let’s add, commit, and push the file up.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add README.md
git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;initial commit&quot;&lt;/span&gt;
git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we’ve got a fully functional git repo with a master branch. All ready to go!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/Hosting-Git-Repos/&quot;&gt;Hosting Git Repos&lt;/a&gt; was originally published by Spencer Smith at &lt;a href=&quot;&quot;&gt;Spencer's Blog&lt;/a&gt; on March 27, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Using Rerun]]></title>
 <link rel="alternate" type="text/html" href="/Using-rerun/" />
  <id>/Using-rerun</id>
  <published>2015-02-17T00:00:00-05:00</published>
  <updated>2015-02-17T00:00:00-05:00</updated>
  <author>
    <name>Spencer Smith</name>
    <uri></uri>
    <email>robertspencersmith@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Today’s post will go into some detail on getting started with
&lt;a href=&quot;https://rerun.github.io/rerun/&quot;&gt;Rerun&lt;/a&gt;.
Rerun is a tool that’s kind of meant to bridge the gap between having a
bunch of sysadmin scripts and a full-blown configuration management tool.
The truth is that a lot of times, groups have a bunch of bash scripts
that can perform differently on different machines or exist in several different
versions. This makes it hard to ensure that you’re always using the right one,
the right flags are being passed, etc., etc. Rerun sets out to help wrangle your
shell scripts and present them as something super easy to use.&lt;/p&gt;

&lt;h2 id=&quot;install-rerun&quot;&gt;&lt;strong&gt;Install Rerun&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Installing Rerun is really just a ‘git clone’ and then adding a bunch of
variables to your .bash_profile. I rolled it all into a script so it can just be
run (at your own risk). Just issue &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod +x whatever_you_name.sh&lt;/code&gt;,
followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;./whatever_you_name.sh&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##Checkout Rerun to home directory&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;
git clone git://github.com/rerun/rerun.git

&lt;span class=&quot;c&quot;&gt;##Append rerun particulars to user profile&lt;/span&gt;
cat &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; $HOME/.bash_profile
##Begin vars for rerun
export PATH=$PATH:$HOME/rerun
export RERUN_MODULES=$HOME/rerun/modules
[ -r $HOME/rerun/etc/bash_completion.sh ] &amp;amp;&amp;amp; source $HOME/rerun/etc/bash_completion.sh
[ -t 0 ] &amp;amp;&amp;amp; export RERUN_COLOR=true
##End vars for rerun
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Exit the terminal and restart, then issue &lt;code class=&quot;highlighter-rouge&quot;&gt;rerun&lt;/code&gt; to see if it’s working.
This should give you a list of the modules installed:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Spencers-MBP:~ spencer&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rerun
Available modules:
  stubbs: &lt;span class=&quot;s2&quot;&gt;&quot;Simple rerun module builder&quot;&lt;/span&gt; - 1.2.2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;create-a-module--command&quot;&gt;&lt;strong&gt;Create a Module &amp;amp; Command&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Now let’s run through the Rerun &lt;a href=&quot;https://github.com/rerun/rerun/wiki/Tutorial&quot;&gt;tutorial&lt;/a&gt;.
A lot of this part of the post will be a rehashing of that page, with some differences
here and there to keep myself from just copying/pasting and not actually committing this
to memory. We will be creating a waitfor module that simply waits for a variety of different
conditions like ping to be available at a given address, a file to exist, etc..&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rerun uses a module:command type syntax, where module is kind of the general idea
of what you’re trying to do, while command is the specifics. So, let’s use the stubbs
module’s add-module command to create the bones for our waitfor module:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rerun stubbs:add-module --module waitfor --description &lt;span class=&quot;s2&quot;&gt;&quot;waits for a condition.&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Okay, now let’s add a ping command to our waitfor module with&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rerun stubbs:add-command --module waitfor --command ping --description &lt;span class=&quot;s2&quot;&gt;&quot;wait for ping response from address&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Note that this command creates both a script and a test.sh file. script is what
will actually get run, the test file is for us to write a test plan.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For ping, we’ll want to add a host and an interval option. Host will
be required, while we will set the interval option with a default and make overriding
that optional.&lt;/li&gt;
  &lt;li&gt;Set the required host option:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rerun stubbs:add-option --option host --description &lt;span class=&quot;s2&quot;&gt;&quot;host to ping&quot;&lt;/span&gt; --module waitfor --command ping --required &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; --export &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; --default &lt;span class=&quot;s1&quot;&gt;&#39;&quot;&quot;&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Set the optional interval option:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rerun stubbs:add-option --option interval --description &lt;span class=&quot;s2&quot;&gt;&quot;how long to wait between attempts&quot;&lt;/span&gt; --module waitfor --command ping --required &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; --export &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; --default 30&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Let’s make sure our params look right by checking the output with &lt;code class=&quot;highlighter-rouge&quot;&gt;rerun waitfor&lt;/code&gt;.
Rerun gives a pretty easy to read/understand output when you try to figure out what
a module is capable of.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Spencers-MBP:~ spencer&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rerun waitfor
Available commands &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;module, &lt;span class=&quot;s2&quot;&gt;&quot;waitfor&quot;&lt;/span&gt;:
ping: &lt;span class=&quot;s2&quot;&gt;&quot;wait for ping response from address&quot;&lt;/span&gt;
    --host &amp;lt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;: &lt;span class=&quot;s2&quot;&gt;&quot;host to ping&quot;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; --interval &amp;lt;30&amp;gt;]: &lt;span class=&quot;s2&quot;&gt;&quot;how long to wait between attempts&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;implement-the-command&quot;&gt;&lt;strong&gt;Implement the Command&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;So now we’ve got our command created, but it doesn’t actually do anything. Rerun
can’t read our mind, so it just lays down some basics and it’s up to us to implement
the particulars.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open the file &lt;code class=&quot;highlighter-rouge&quot;&gt;~/rerun/modules/waitfor/commands/ping/script&lt;/code&gt; for editing.
Scroll down to the bottom, where you will see:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Command implementation&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ----------------------&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# - - -&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Put the command implementation here.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# - - -&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Replace the ‘Put the command implementation here’ with your code. I had to throw
in a -t flag in the ping command to timeout quicker on Mac.
For our ping check, the code will look like:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;## Loop until a single ping packet returns a result string that contains 64.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## 64 is the number of bytes in ping response&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; ping -c 1 -t 1 &lt;span class=&quot;nv&quot;&gt;$HOST&lt;/span&gt; | grep -q ^64 &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
   &lt;span class=&quot;c&quot;&gt;##Sleep by our interval if unsuccessful&lt;/span&gt;
   sleep &lt;span class=&quot;nv&quot;&gt;$INTERVAL&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Pinging &lt;span class=&quot;nv&quot;&gt;$HOST&lt;/span&gt;...
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##Finally return when ping available&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;OK: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOST&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is pingable.&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Test it out with a call to localhost. This should always return a positive ping.
&lt;code class=&quot;highlighter-rouge&quot;&gt;rerun waitfor:ping --host localhost --interval 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Spencers-MBP:~ spencer&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rerun waitfor:ping --host localhost --interval 1
OK: localhost is pingable.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;write-tests&quot;&gt;&lt;strong&gt;Write Tests&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Okay, let’s write the tests for our new command. This will help us ensure it’s working
the right way.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;~/rerun/modules/waitfor/tests/ping-1-test.sh&lt;/code&gt; for editing. Remove the whole
‘it_fails_without_a_real_test’ block.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We’ll create two new functions. One will check that the required host is present.
The other will check that localhost responds as expected. These tests are straight
from the wiki tutorial with extra comments to explain what’s actually happening.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;##Check that the required host is passed in&lt;/span&gt;
it_fails_without_required_options&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;##Make a temp file to write to&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;mktemp /tmp/waitfor:ping-XXXX&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;##Negate the error of not passing a host with &#39;!&#39;. Write results to outfile.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;##The &#39;2&amp;gt;&#39; param redirects stderr to the outfile&lt;/span&gt;
    ! rerun waitfor:ping 2&amp;gt; &lt;span class=&quot;nv&quot;&gt;$OUT&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;##Check that missing text is in outfile&lt;/span&gt;
    grep &lt;span class=&quot;s1&quot;&gt;&#39;missing required option: --host&#39;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$OUT&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;##Delete outfile&lt;/span&gt;
    rm &lt;span class=&quot;nv&quot;&gt;$OUT&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;##Check that command works for localhost&lt;/span&gt;
it_reaches_localhost&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;##Make a temp file to write to&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;mktemp /tmp/waitfor:ping-XXXX&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;##Run with localhost passed as host param&lt;/span&gt;
    rerun waitfor:ping --host localhost &amp;gt; &lt;span class=&quot;nv&quot;&gt;$OUT&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;##Ensure proper output is present in outfile&lt;/span&gt;
    grep &lt;span class=&quot;s1&quot;&gt;&#39;OK: localhost is pingable.&#39;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$OUT&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;##Delete outfile&lt;/span&gt;
    rm &lt;span class=&quot;nv&quot;&gt;$OUT&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Finally, let’s check that the output of the stubbs:test command to make sure
our tests pass. Issue &lt;code class=&quot;highlighter-rouge&quot;&gt;rerun stubbs:test --module waitfor --plan ping&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Spencers-MBP:~ spencer&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rerun stubbs:test --module waitfor --plan ping
&lt;span class=&quot;o&quot;&gt;=========================================================&lt;/span&gt;
 TESTING MODULE: waitfor
&lt;span class=&quot;o&quot;&gt;=========================================================&lt;/span&gt;
ping
  it_fails_without_required_options:               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PASS]
  it_reaches_localhost:                            &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PASS]
&lt;span class=&quot;o&quot;&gt;=========================================================&lt;/span&gt;
Tests:    2 | Passed:   2 | Failed:   0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;extend-extend-extend&quot;&gt;&lt;strong&gt;Extend, Extend, Extend&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Now that we have learned all of the functionality from the official tutorial, it’s time to extend our module to do other things. Consider what the ‘waitfor’ module is for. It is there to wait on things in general, not just ping responses. So let’s extend our module to support another wait use case, waiting for a file to exist.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First let’s add the new command to our module. This is as simple as it was earlier, just pass the proper options as needed:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rerun stubbs: add-command --module waitfor --command file --description &lt;span class=&quot;s2&quot;&gt;&quot;Waits for a file to be present on the system&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Add options for the filepath we want to check, as well as the interval we want to wait to check:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rerun stubbs: add-option --option filepath --description &lt;span class=&quot;s2&quot;&gt;&quot;full path of file to wait for&quot;&lt;/span&gt; --module waitfor --command file --required &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; --export &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; --default &lt;span class=&quot;s1&quot;&gt;&#39;&quot;&quot;&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rerun stubbs: add-option --option interval --description &lt;span class=&quot;s2&quot;&gt;&quot;how long to wait between attempts&quot;&lt;/span&gt; --module waitfor --command file --required &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; --export &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; --default 30&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Time to implement the actual logic behind our file checker. You’ll notice that since this command is similar in function to our ping command, a lot of the same logic that we used previously still applies. Here’s the relevant bash from ‘waitfor/commands/file/script’:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FILEPATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;##Sleep by our interval if unsuccessful&lt;/span&gt;
 sleep &lt;span class=&quot;nv&quot;&gt;$INTERVAL&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Checking for file at &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FILEPATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##Finally return when file exists&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;OK: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FILEPATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; now exists.&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;We can now see this in action by issuing our command, waiting for a few cycles to occur, then touching the file that we want to exist in another terminal. For me, the touch command was simply  touch /tmp/test.txt.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Spencers-MBP:~ spencer&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rerun waitfor: file --filepath &lt;span class=&quot;s2&quot;&gt;&quot;/tmp/test.txt&quot;&lt;/span&gt; --interval 1
Checking &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;file at /tmp/test.txt
Checking &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;file at /tmp/test.txt
Checking &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;file at /tmp/test.txt
Checking &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;file at /tmp/test.txt
OK: /tmp/test.txt now exists.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Finally, we would want to write some tests around this command to ensure it functions as expected when variables are missing, etc.. This post is getting pretty lengthy, so I will leave that task up to you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that’s it! I hope you enjoyed this intro to Rerun. It’s a really fun tool to use once you pick up the basics, and it really makes it dead simple to allow other team mates (even those who may not be very adept with bash) to execute scripts in a known, repeatable manner.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/Using-rerun/&quot;&gt;Using Rerun&lt;/a&gt; was originally published by Spencer Smith at &lt;a href=&quot;&quot;&gt;Spencer's Blog&lt;/a&gt; on February 17, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Installing CFEngine]]></title>
 <link rel="alternate" type="text/html" href="/Configuration-Management-with-CFEngine/" />
  <id>/Configuration-Management-with-CFEngine</id>
  <published>2015-02-15T00:00:00-05:00</published>
  <updated>2015-02-15T00:00:00-05:00</updated>
  <author>
    <name>Spencer Smith</name>
    <uri></uri>
    <email>robertspencersmith@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Continuing on my thread of exploring new technologies for my new job, today I’ll
be looking at CFEngine and how we can use it for configuration management. I’ve
used other tools like Chef and Ansible in the past, but CFEngine is a new one
for me. I’ll be installing and configuring a server and some nodes in my home
Openstack lab.&lt;/p&gt;

&lt;h2 id=&quot;setup-the-server&quot;&gt;&lt;strong&gt;Setup the Server&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I’m going to use the instructions for CFEngine enterprise for this tutorial. It
appears to be free for the first 25 nodes, so it will be nice to test against the
version that I may actually have to use at work.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create a server in Openstack and go ahead and SSH in. I had to use a Ubuntu 12.04
LTS image for this. 14.04 LTS returned an error about not being supported. I imagine
that will be fixed in the future.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open the /etc/hosts file for editing and add an entry for the private IP address to
give it a hostname. The script below with fail if &lt;code class=&quot;highlighter-rouge&quot;&gt;hostname -f&lt;/code&gt; doesn’t return
anything. I added this to my hosts file:
&lt;code class=&quot;highlighter-rouge&quot;&gt;10.0.0.29 cfengine-server.localdomain&lt;/code&gt;. You may also have to enter
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo hostname cfengine-server.localdomain&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Grab the CFEngine install script with
&lt;code class=&quot;highlighter-rouge&quot;&gt;wget http://s3.amazonaws.com/cfengine.packages/quick-install-cfengine-enterprise.sh&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make it executable with &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod +x quick-install-cfengine-enterprise.sh&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run the script with sudo rights and pass the hub argument to specify that this
will be a central hub server:
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ./quick-install-cfengine-enterprise.sh hub&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bootstrap the CFEngine hub with &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo /var/cfengine/bin/cf-agent --bootstrap 10.0.0.29&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We should now be able to login to the server’s web UI by going to the floating
IP address in a browser. The default login information is admin/admin. &lt;strong&gt;Make sure
your default security group lets port 80 in.&lt;/strong&gt;
&lt;a href=&quot;/img/posts/2015-02-15-configuration-management-with-cfengine/server-running.png&quot;&gt;
&lt;img src=&quot;/img/posts/2015-02-15-configuration-management-with-cfengine/server-running.png&quot; style=&quot;max-width:100%; border:solid 1px;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setup-the-clients&quot;&gt;&lt;strong&gt;Setup the Clients&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Now let’s get some clients set up so that we have some systems to actually manage
with our snazzy new server. This process is almost exactly the same as the above,
with the exception of the argument passed to quick-install-cfengine-enterprise.sh.
I won’t copy/paste everything from above, but just follow the same steps and when
you get there, issue this command instead:
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ./quick-install-cfengine-enterprise.sh agent&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;One last possible caveat here. I created a Ubuntu 12.04 image with the CFEngine
client installed and it caused a kernel panic on boot. I’m not sure what was going on,
but using a 14.04 image worked just fine.&lt;/p&gt;

&lt;p&gt;Once you get the client setup completed, you should see your new nodes checked in
in the web UI.
&lt;a href=&quot;/img/posts/2015-02-15-configuration-management-with-cfengine/nodes-checked-in.png&quot;&gt;
  &lt;img src=&quot;/img/posts/2015-02-15-configuration-management-with-cfengine/nodes-checked-in.png&quot; style=&quot;max-width:100%; border:solid 1px;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/Configuration-Management-with-CFEngine/&quot;&gt;Installing CFEngine&lt;/a&gt; was originally published by Spencer Smith at &lt;a href=&quot;&quot;&gt;Spencer's Blog&lt;/a&gt; on February 15, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Showing dd Progress]]></title>
 <link rel="alternate" type="text/html" href="/Showing-dd-Progress-in-Terminal/" />
  <id>/Showing-dd-Progress-in-Terminal</id>
  <published>2015-02-14T00:00:00-05:00</published>
  <updated>2015-02-14T00:00:00-05:00</updated>
  <author>
    <name>Spencer Smith</name>
    <uri></uri>
    <email>robertspencersmith@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;As I was trying to write an ISO to a USB drive, I wanted to see the progress when
using the ‘dd’ command line tool. I found a quick pointer on StackOverflow to use
the ‘pv’ command, so I adapted a little to use on a Mac. This will also serve
as a guide on how to write ISOs on Mac. Here’s how:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install pv with homebrew: &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install pv&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Find your USB drive with &lt;code class=&quot;highlighter-rouge&quot;&gt;diskutil list&lt;/code&gt;. Should be pretty easy to spot the
USB drive as it will be smaller than the other disks. Tread lightly though, don’t
mess with your hard drive. I’ll use /dev/disk3, as that’s what my command returned.&lt;/li&gt;
  &lt;li&gt;Unmount it with &lt;code class=&quot;highlighter-rouge&quot;&gt;diskutil unmountDisk /dev/disk3&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Become root with &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo su&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Write your iso with this general layout, substituting paths where necessary:
&lt;code class=&quot;highlighter-rouge&quot;&gt;dd if=/path/to/your.iso | pv | dd of=/dev/disk3 bs=1024k&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;/Showing-dd-Progress-in-Terminal/&quot;&gt;Showing dd Progress&lt;/a&gt; was originally published by Spencer Smith at &lt;a href=&quot;&quot;&gt;Spencer's Blog&lt;/a&gt; on February 14, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Getting Started with Packer]]></title>
 <link rel="alternate" type="text/html" href="/Getting-Started-With-Packer/" />
  <id>/Getting-Started-With-Packer</id>
  <published>2015-02-14T00:00:00-05:00</published>
  <updated>2015-02-14T00:00:00-05:00</updated>
  <author>
    <name>Spencer Smith</name>
    <uri></uri>
    <email>robertspencersmith@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;As part of a new job I’m taking, I wanted to learn more about image building
for Openstack and other virtual environments. I’ve done it by hand for the customized
OSes at my old job, but I haven’t had the chance to explore any automated solutions.
I was pointed to Packer as a tool to build several different images at the same time (and automatically). It sounds like a great project and I’m going to use this post to
get up to speed with using the basics. One quick caveat from the outset is that
I’m not going to use Amazon at first. I’ll be running against my home Openstack lab
since it’s free and a good excuse to get my homelab back in order.&lt;/p&gt;

&lt;h2 id=&quot;install-packer&quot;&gt;&lt;strong&gt;Install Packer&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;I’ve got a shiny new Macbook, and installing Packer was actually really easy.
The way I did it depended on homebrew, but you can also install manually from
from their docs &lt;a href=&quot;https://www.packer.io/intro/getting-started/setup.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In terminal, ensure that you have homebrew setup by issuing &lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add the necessary tap with &lt;code class=&quot;highlighter-rouge&quot;&gt;brew tap homebrew/binary&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Finally, install packer with &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install packer&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;You can test it’s installed by simply issuing &lt;code class=&quot;highlighter-rouge&quot;&gt;packer&lt;/code&gt; in the terminal.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;get-openstack-ready&quot;&gt;&lt;strong&gt;Get Openstack Ready&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I run an all-in-one deployment of RDO Openstack at home. Obviously, there’s a
million different ways to deploy, but &lt;a href=&quot;https://openstack.redhat.com/Quickstart&quot;&gt;here&lt;/a&gt;
and &lt;a href=&quot;https://openstack.redhat.com/Neutron_with_existing_external_network&quot;&gt;here&lt;/a&gt;
are the pieces that I followed. It’s important to note that in my lab, instances
come alive on a private network, then get access to my router’s 192.168.1.0/24 block
via floating IPs. This will come in to play a bit later with the Packer template.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Get a known good image into Glance by importing one of the big distros. I used
the Ubuntu 14.04 LTS image found &lt;a href=&quot;https://cloud-images.ubuntu.com/trusty/current/trusty-server-cloudimg-amd64-disk1.img&quot;&gt;here&lt;/a&gt;. You can just put that link into Glance’s import dialog. My final dialog looked like this:
&lt;a href=&quot;/img/posts/2015-02-14-getting-started-with-packer/glance-dialog.png&quot;&gt;
&lt;img src=&quot;/img/posts/2015-02-14-getting-started-with-packer/glance-dialog.png&quot; style=&quot;max-width:100%; border:solid 1px;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Take note of the new image’s UUID, we’ll need that later:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rsmitty@localhost ~&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;keystone_admin&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nova image-list
+--------------------------------------+-------------------+--------+----------+
| ID                                   | Name              | Status | Server
+--------------------------------------+-------------------+--------+----------+
| bf2ad7f1-3823-4ad2-a788-44a25827c93e | cirros            | ACTIVE |
| b3a4368b-7368-45e5-bfe4-63f59d732c41 | ubuntu 14.04      | ACTIVE |
+--------------------------------------+-------------------+--------+----------+&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;write-packer-template&quot;&gt;&lt;strong&gt;Write Packer Template&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Okay, time to get busy. Let’s write a template for Packer to create an image list.
We’ll need to gather some info first.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get your keystone info by catting out your keystonerc file. For me, this was
&lt;code class=&quot;highlighter-rouge&quot;&gt;cat keystonerc_admin&lt;/code&gt;. Some info below has been changed to protect the innocent.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rsmitty@localhost ~&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;keystone_admin&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat keystonerc_admin
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OS_USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;admin
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OS_TENANT_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;admin
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OS_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;testpass
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OS_AUTH_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://192.168.1.200:5000/v2.0/
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OS_REGION_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;RegionOne
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PS1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;[\u@\h \W(keystone_admin)]\$ &#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create a new json file somewhere on your machine. I simply called mine packer_template.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There’s a lot of options for Openstack in Packer (found &lt;a href=&quot;https://www.packer.io/docs/builders/openstack.html&quot;&gt;here&lt;/a&gt;). Some of this will
vary by the way your particular Openstack deployment is set up, but for me, this
template contains all of the necessary basic fields:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;builders&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;openstack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;testpass&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;provider&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://192.168.1.200:5000/v2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ssh_username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ubuntu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;project&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;region&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;RegionOne&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;image_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Packer Test Image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;source_image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b3a4368b-7368-45e5-bfe4-63f59d732c41&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;flavor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0d7e469c-e99b-4267-b154-35874b224f54&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;networks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0296eb7d-7f94-4cc1-b42f-f2d680b81359&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;use_floating_ip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notes about what’s what:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;username &amp;amp; password&lt;/strong&gt;: Map to OS_USERNAME and OS_PASSWORD from source file&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;provider&lt;/strong&gt;: Maps to OS_AUTH_URL&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;region&lt;/strong&gt;: Maps to OS_REGION_NAME&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;source image&lt;/strong&gt;: UUID of the Ubuntu image we talked about earlier&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;flavor&lt;/strong&gt;: UUID of my m1.tiny flavor. Beware, this changes on any flavor update!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;networks&lt;/strong&gt;: UUID of my private network. Can be an array of several networks.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;use_floating_ip&lt;/strong&gt;: As mentioned earlier, floating IP allows Packer to actually
SSH to this server across my home network.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;test-time&quot;&gt;&lt;strong&gt;Test Time!&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Let’s see if this thing will actually create an image for us.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Save your template if you haven’t already.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Validate the template to make sure there aren’t any glaring errors with
&lt;code class=&quot;highlighter-rouge&quot;&gt;packer validate NAME_OF_TEMPLATE.json&lt;/code&gt;. This should return the text
‘Template validated successfully.’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run the template with &lt;code class=&quot;highlighter-rouge&quot;&gt;packer build NAME_OF_TEMPLATE.json&lt;/code&gt;. For me, this
gave the following output when everything completely worked:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Spencers-MBP:Desktop spencer&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;packer build packer_template
openstack output will be &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;this color.

&lt;span class=&quot;gp&quot;&gt;==&amp;gt; &lt;/span&gt;openstack: Creating temporary keypair &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;this instance...
&lt;span class=&quot;gp&quot;&gt;==&amp;gt; &lt;/span&gt;openstack: Waiting &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;server &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;82db25b2-e1a5-4aef-be4a-cfccf744e103&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; to become ready...
&lt;span class=&quot;gp&quot;&gt;==&amp;gt; &lt;/span&gt;openstack: Created temporary floating IP 192.168.1.204...
&lt;span class=&quot;gp&quot;&gt;==&amp;gt; &lt;/span&gt;openstack: Added floating IP 192.168.1.204 to instance...
&lt;span class=&quot;gp&quot;&gt;==&amp;gt; &lt;/span&gt;openstack: Waiting &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;SSH to become available...
&lt;span class=&quot;gp&quot;&gt;==&amp;gt; &lt;/span&gt;openstack: Connected to SSH!
&lt;span class=&quot;gp&quot;&gt;==&amp;gt; &lt;/span&gt;openstack: Creating the image: Packer Test Image
&lt;span class=&quot;gp&quot;&gt;==&amp;gt; &lt;/span&gt;openstack: Image: 70a610e9-302a-40f4-a4ca-59b6ad260e63
&lt;span class=&quot;gp&quot;&gt;==&amp;gt; &lt;/span&gt;openstack: Waiting &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;image to become ready...
&lt;span class=&quot;gp&quot;&gt;==&amp;gt; &lt;/span&gt;openstack: Terminating the &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;server...
&lt;span class=&quot;gp&quot;&gt;==&amp;gt; &lt;/span&gt;openstack: Deleting temporary keypair...
Build &lt;span class=&quot;s1&quot;&gt;&#39;openstack&#39;&lt;/span&gt; finished.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Nice! Seemed to work. Now if we head out to the Glance UI, we can see that our
shiny new image hanging out!
&lt;a href=&quot;/img/posts/2015-02-14-getting-started-with-packer/image-present.png&quot;&gt;
&lt;img src=&quot;/img/posts/2015-02-14-getting-started-with-packer/image-present.png&quot; style=&quot;max-width:100%; border:solid 1px;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;well-now-what&quot;&gt;&lt;strong&gt;Well, Now What?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;So we’ve built an image with Packer, which is great. But the real value here comes
with building on multiple platforms at the same time and also doing some provisioning
to install the necessities before creating the image.&lt;/p&gt;

&lt;p&gt;This tutorial is getting pretty long in the tooth, so I’m not going to add another provider to create an image on, but I do want to actually install something to actually change something about the image. Let’s install Apache as part of the
build. Note that in a proper environment, we would probably just install Apache
and we would let our config manangement tool handle deploying our webpage, since
that’s the kind of thing we would want to checkout from version control at boot
time.&lt;/p&gt;

&lt;p&gt;Here’s the template:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;builders&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;openstack&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;admin&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;testpass&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;provider&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;http://192.168.1.200:5000/v2.0&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;ssh_username&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;ubuntu&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;project&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;admin&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;region&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;RegionOne&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;image_name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;Packer Test Image&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;source_image&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;b3a4368b-7368-45e5-bfe4-63f59d732c41&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;flavor&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;0d7e469c-e99b-4267-b154-35874b224f54&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;networks&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0296eb7d-7f94-4cc1-b42f-f2d680b81359&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;use_floating_ip&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
   &lt;span class=&quot;s2&quot;&gt;&quot;provisioners&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;inline&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;sleep 30&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;sudo apt-get update&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;sudo apt-get install -y apache2&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


    &lt;p&gt;&lt;a href=&quot;/Getting-Started-With-Packer/&quot;&gt;Getting Started with Packer&lt;/a&gt; was originally published by Spencer Smith at &lt;a href=&quot;&quot;&gt;Spencer's Blog&lt;/a&gt; on February 14, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Scanning Only New Files With Clamscan]]></title>
 <link rel="alternate" type="text/html" href="/clamscan-files-by-date/" />
  <id>/clamscan-files-by-date</id>
  <published>2014-09-16T00:00:00-04:00</published>
  <updated>2014-09-16T00:00:00-04:00</updated>
  <author>
    <name>Spencer Smith</name>
    <uri></uri>
    <email>robertspencersmith@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;So, I ran into a need to scan some files for viruses on Ubuntu this past week. However, a couple of things prevented this from being straight forward:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I couldn’t be sure where these files were being stored.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I didn’t want to scan the entire filesystem just to get at these few files.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I went out looking for a way to scan only new files with clamscan. After a good bit of digging, I ran across &lt;a href=&quot;http://www.gossamer-threads.com/lists/clamav/users/53298&quot;&gt;this&lt;/a&gt; old thread where someone had a similar question. So after getting a pointer there, I was able to make this happen. Here is the way to do it:&lt;/p&gt;

&lt;h2 id=&quot;install-clamav&quot;&gt;&lt;strong&gt;Install ClamAV&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Issue &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install clamav&lt;/code&gt; to get the freshclam and clamscan commands.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Update the virus definitions with a &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo freshclam&lt;/code&gt;. This will take a few seconds the first time.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;get-ya-find-right&quot;&gt;&lt;strong&gt;Get Ya Find Right&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Now this took a bit of playing around with to get where I wanted. I wanted to find all files of a certain type that had been created or modified in the past week. There’s also some differences to note about mtime vs. ctime vs. atime as a flag for find. &lt;a href=&quot;http://www.linux-faqs.info/general/difference-between-mtime-ctime-and-atime&quot;&gt;Linux-FAQs.info&lt;/a&gt; did a good job of explaining these differences:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ctime - ctime is the inode or file change time. The ctime gets updated when the file attributes are changed, like changing the owner, changing the permission or moving the file to an other filesystem but will also be updated when you modify a file.

mtime - mtime is the file modify time. The mtime gets updated when you modify a file. Whenever you update content of a file or save a file the mtime gets updated.

*Most of the times ctime and mtime will be the same, unless only the file attributes are updated. In that case only the ctime gets updated.*

atime - atime is the file access time. The atime gets updated when you open a file but also when a file is used for other operations like grep, sort, cat, head, tail and so on.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For my purposes, I wanted EVERYTHING that had changed, so that pointed to using the ctime flag. For a first test, I just wanted to see how many items find would return. I was able to do that by issuing (edited to look for .md files, just for laughs): &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo find / -name &quot;*.md&quot; -ctime -7 -type f | wc -l&lt;/code&gt;. That command simply returns the number 5 on my machine at the time of writing. Let’s not pipe it out to wc so we can see those files:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;rsmitty@rsmitty-notebook:~$ &lt;/span&gt;sudo find / -name &lt;span class=&quot;s2&quot;&gt;&quot;*.md&quot;&lt;/span&gt; -ctime -7 -type f
/home/rsmitty/Desktop/usenet-dashboard/README.md
/home/rsmitty/Desktop/rsmitty.github.io/_posts/2014-09-07-creating-a-blog-2.md
/home/rsmitty/Desktop/rsmitty.github.io/_posts/2014-09-16-clamscan-files-by-date.md
/home/rsmitty/.xbmc/addons/service.xbmc.versioncheck/README.md
/usr/share/xbmc/addons/service.xbmc.versioncheck/README.md&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note: You’ll have to do almost everything with ClamAV as root user. Also, you can change the number of days to scan for by changing the ‘-7’ portion of the command.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Okay, slightly more interesting, and now we know what we’re working with. Let’s move on…&lt;/p&gt;

&lt;h2 id=&quot;enter-xargs&quot;&gt;&lt;strong&gt;Enter Xargs&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Using xargs was a first for me as part of this little endeavor. It’s a really handy tool to add to the toolbox! If you’ve ever tried to run a bash command like &lt;code class=&quot;highlighter-rouge&quot;&gt;rm *&lt;/code&gt; and received an error like “Argument list too long”, xargs is the answer to your problems. It takes the argument list and breaks it down into smaller pieces. It’ll then run subsequent commands with each sublist. For the purposes of what I was doing initally, there were about 7,000 files to scan, xargs was able to break those up into two scans of ~3,000 files and one scan of ~1,000. Worked great!&lt;/p&gt;

&lt;p&gt;Here’s the final command that I used:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo find / -name &lt;span class=&quot;s2&quot;&gt;&quot;*.md&quot;&lt;/span&gt; -ctime -7 -type f -print0 | sudo xargs -0 clamscan --remove --log&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/rsmitty/clamscan.log&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;The –remove flag just means that if a vulnerability is found in that file, delete the file immediately.&lt;/li&gt;
  &lt;li&gt;the –log flag sets the path of the log file that clamscan will write. You will need to do this for sure if you have lots of files to scan, because several scan summaries will be written to this file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After running, the log file will look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;rsmitty@rsmitty-notebook:~$ &lt;/span&gt;sudo cat /home/rsmitty/clamscan.log 

----------- SCAN SUMMARY -----------
Known viruses: 3560111
Engine version: 0.98.1
Scanned directories: 0
Scanned files: 5
Infected files: 0
Data scanned: 0.02 MB
Data &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt;: 0.01 MB &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ratio 2.50:1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Time: 6.441 sec &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 m 6 s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


    &lt;p&gt;&lt;a href=&quot;/clamscan-files-by-date/&quot;&gt;Scanning Only New Files With Clamscan&lt;/a&gt; was originally published by Spencer Smith at &lt;a href=&quot;&quot;&gt;Spencer's Blog&lt;/a&gt; on September 16, 2014.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Creating A Blog With Github Pages, Jekyll, And Bootstrap - Part 2]]></title>
 <link rel="alternate" type="text/html" href="/creating-a-blog-2/" />
  <id>/creating-a-blog-2</id>
  <published>2014-09-07T00:00:00-04:00</published>
  <updated>2014-09-07T00:00:00-04:00</updated>
  <author>
    <name>Spencer Smith</name>
    <uri></uri>
    <email>robertspencersmith@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;After &lt;a href=&quot;../06/creating-a-blog-1.html&quot;&gt;part one&lt;/a&gt; of this tutorial, we have a development environment setup that’s ready for us to really start making some headway in getting a presentable blog up and running. In this tutorial, I’ll show how I plugged Bootstrap’s example blog theme into my site and also guide through creating a first post.&lt;/p&gt;

&lt;h3 id=&quot;create-a-default-layout&quot;&gt;&lt;strong&gt;Create A Default Layout&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;First, we’ll want to get our code syntax highligting to work. Create a CSS file in the root of your Github repo called pygments.css by issuing: &lt;code class=&quot;highlighter-rouge&quot;&gt;pygmentize -S default -f html &amp;gt; pygments.css&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: This step may not be necessary for everyone, but I’ll be including a call to pygments.css in the next step. So if you’re following along step-by-step, it may be worth going ahead and doing this.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Let’s create a default template for all of our pages to use. This is where the special folders that we created in the last tutorial come into play. Change into the _layouts directory and open a file called default.html for editing. I’ve created a basic template that imports the necessary CSS and Javascript files for the Bootstrap example blog. I’m relying on the public URLs for those imports; however, if you want to ensure that they are always functional, you’ll want to download these files manually and import them from a path inside your repo. Add the following to the default.html file:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;text/html; charset=utf-8&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;X-UA-Compatible&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;IE=edge&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;viewport&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;width=device-width, initial-scale=1.0, maximum-scale=1.0&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ site.name }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;author&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.name }}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;description&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.description }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Bootstrap CSS Files --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://getbootstrap.com/examples/blog/blog.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Pygments CSS File for Syntax Highlighting --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/pygments.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog-masthead navbar-fixed-top&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog-nav&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog-nav-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Home&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog-nav-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;About&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog-header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog-title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{site.name}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lead blog-description&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{site.description}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-sm-8 blog-main&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          {{ content }}
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-sm-3 col-sm-offset-1 blog-sidebar&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sidebar-module sidebar-module-inset&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;About&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{site.about}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sidebar-module sidebar-module-inset&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Contact Info&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ol&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;list-unstyled&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_blank&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Github&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_blank&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;LinkedIn&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Bootstrap JS Files --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;edit-the-index-page&quot;&gt;&lt;strong&gt;Edit The Index Page&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Let’s tell our index.html page to use our snazzy new layout. Edit your index.html page to look like the following:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;---
layout: default
---

Hello, World!&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: The YAML at the top of this page allows us to specify certain behavior from page to page. For example, we’re telling this page to load our default template. However, if we created another template called foo later on in the future, we could simply change the layout variable to point to the new foo layout.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Refresh the localhost:4000 page in your browser and you should see the new layout load, along with all of the site info that we entered in _config.yml in the last tutorial.
&lt;a href=&quot;/img/posts/2014-09-07-creating-a-blog-2/bootstrap-loaded.png&quot;&gt;
&lt;img src=&quot;/img/posts/2014-09-07-creating-a-blog-2/bootstrap-loaded.png&quot; style=&quot;max-width:100%; border:solid 1px;&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Looks good! Now, we’d rather the index page say something other than “Hello, World”. In fact, we want the first thing that people see to be a list of all of the highly interesting and potentially life changing posts that we’ll be making as our blogging continues. Let’s now edit our index.html to look like the following:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;---
layout: default
---

{% for post in site.posts %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog-post&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog-post-title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ post.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog-post-meta&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Written {{ post.date | date: &quot;%m.%d.%Y&quot; }} by {{post.author}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        {{ post.content | truncatewords:40}}  
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;read-more&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Read More&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
{% endfor %}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This tells Jekyll to run a for-loop before displaying the index.html page. As this loop runs, a div is created for each blog post, along with some info about the post (author, date, etc.). It also truncates the post to 40 words and provides a link to read the full text. A refresh will be pretty blank right now, as there’s not any posts and it looks a bit silly. Let’s create a dummy post to fill things out a bit.&lt;/p&gt;

&lt;h3 id=&quot;create-a-post&quot;&gt;&lt;strong&gt;Create A Post&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Creating a post is a bit of pretty cool black magic on Jekyll’s side. It expects a specific type of filename and reside in the _posts directory. So let’s create a file named like YEAR-MONTH-DAY-TITLE.md. At the time of this writing, I’m issuing &lt;code class=&quot;highlighter-rouge&quot;&gt;touch 2014-09-07-hello-post-world.md&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Inside that file, we’ll add some YAML configuration to the top to tell it some info about layout, title, and author. Edit the file to look like this and feel free to the author and text to whatever you wish:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;---
layout: posts
author: Spencer
title: Hello, Post World!
---

Here&#39;s some pretty incredible text to prove that it actually shows up in our index page and I&#39;ll continue rambling here in hopes that I hit forty words and the post gets truncated. That will allow us to see the &quot;Read More&quot; link appear on our post.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Refresh the localhost:4000 page and you’ll see your first post appear!
&lt;a href=&quot;/img/posts/2014-09-07-creating-a-blog-2/first-post.png&quot;&gt;
&lt;img src=&quot;/img/posts/2014-09-07-creating-a-blog-2/first-post.png&quot; style=&quot;max-width:100%; border:solid 1px;&quot; /&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nice! Until you click the “Read More” or the title of the post. There’s no posts.html in _layouts, which is what we specified at the top of our file just a second ago. We can’t really use the default layout we created, because it’s missing a couple of things like post title and a back button that we’d want on single posts, but not on the main page.&lt;/p&gt;

&lt;h3 id=&quot;create-a-layout-for-posts&quot;&gt;&lt;strong&gt;Create A Layout For Posts&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Create a file called posts.html and place it in the _layouts directory. Populate the file with the following:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;text/html; charset=utf-8&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;X-UA-Compatible&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;IE=edge&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;viewport&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;width=device-width, initial-scale=1.0, maximum-scale=1.0&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ site.name }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;author&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.name }}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;description&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.description }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Latest compiled and minified CSS --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Optional theme --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://getbootstrap.com/examples/blog/blog.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/pygments.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog-masthead navbar-fixed-top&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog-nav&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog-nav-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Home&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog-nav-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;About&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog-header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog-title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{site.name}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lead blog-description&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{site.description}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-sm-8 blog-main&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog-post&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;   
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog-post-title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ page.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog-post-meta&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Written {{ page.date | date: &quot;%m.%d.%Y&quot; }} by {{page.author}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
              {{content}}
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt; Back&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-sm-3 col-sm-offset-1 blog-sidebar&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sidebar-module sidebar-module-inset&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;About&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{site.about}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sidebar-module sidebar-module-inset&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Contact Info&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;ol&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;list-unstyled&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_blank&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Github&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_blank&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;LinkedIn&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;


  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Now, let’s click on a link to our post and see it in all of it’s glory!
&lt;a href=&quot;/img/posts/2014-09-07-creating-a-blog-2/post-layout.png&quot;&gt;
&lt;img src=&quot;/img/posts/2014-09-07-creating-a-blog-2/post-layout.png&quot; style=&quot;max-width:100%; border:solid 1px;&quot; /&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;closing&quot;&gt;&lt;strong&gt;Closing&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Well, that’s pretty much it for how I created my new blog. Now is probably a good time to push all of this to Github and ensure it works properly if you’re following along with these instructions. I hope this has been a helpful write-up and I’m sure I’ll document other cool stuff that I run into as I learn to use Jekyll more effectively. It’s now up to you to create lots and lots of posts on your own blog!&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/creating-a-blog-2/&quot;&gt;Creating A Blog With Github Pages, Jekyll, And Bootstrap - Part 2&lt;/a&gt; was originally published by Spencer Smith at &lt;a href=&quot;&quot;&gt;Spencer's Blog&lt;/a&gt; on September 07, 2014.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Creating A Blog With Github Pages, Jekyll, And Bootstrap - Part 1]]></title>
 <link rel="alternate" type="text/html" href="/creating-a-blog-1/" />
  <id>/creating-a-blog-1</id>
  <published>2014-09-06T00:00:00-04:00</published>
  <updated>2014-09-06T00:00:00-04:00</updated>
  <author>
    <name>Spencer Smith</name>
    <uri></uri>
    <email>robertspencersmith@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;As I wrote previously, I wanted to learn to use Github Pages to build a new blog and start keeping track of my personal projects and ideas. However, in getting started, I noticed that there really wasn’t a straightforward way to move from Github’s quick and dirty tutorial to actually creating a useful blog. There’s some tools like &lt;a href=&quot;http://jekyllbootstrap.com/&quot;&gt;Jekyll Bootstrap&lt;/a&gt;, but it seems like it’s been a while since it has been updated. So after combing through a lot of other people’s pages and some Jekyll tutorials, I was finally able to get something presentable up and running. I figured I’d share the overall process I used as a first series of posts, in case someone else finds it useful.&lt;/p&gt;

&lt;p&gt;This first post will center around getting a development environment setup and creating a “Hello, World!” type page to demonstrate the basics. So without further ado…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This guide assumes a standard Ubuntu installation and a pre-existing Github account.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;create-our-github-page&quot;&gt;&lt;strong&gt;Create Our Github Page&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;First, we’ll want to create an empty repo out on Github. The naming here is quite important, so for a personal blog, you’ll want to name it like GITHUB_USERNAME.github.io. So login to Github and click “+ New Repository”. My repo info looked like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/img/posts/2014-09-06-creating-a-blog-1/create-repo.png&quot;&gt;
  &lt;img src=&quot;/img/posts/2014-09-06-creating-a-blog-1/create-repo.png&quot; style=&quot;max-width:100%; border:solid 1px;&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now, let’s clone our repo locally. This should be as simple as a &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/USERNAME/USERNAME.github.io.git&lt;/code&gt; in some place that you’re comfortable with. If you change into that directory, you’ll see it’s currently empty, unless you created a README or LICENSE file as part of your repo creation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: If you don’t have git installed, issue &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install git&lt;/code&gt; to install.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;install-the-basics&quot;&gt;&lt;strong&gt;Install The Basics&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Let’s grab some packages we need to serve our site locally. This will be useful when writing posts, so you don’t have to push to Github constantly just to see what it looks like. Issue &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install ruby ruby1.9.1-dev python-pip&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We’ll need a Javascript parser and the Jekyll gem, so get NodeJS and Jekyll from rubygems: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo gem install node jekyll&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This step is optional for some, but I needed syntax highlighting for code blocks. So install the Pygments package for Python: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo pip install Pygments&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;create-our-folder-structure&quot;&gt;&lt;strong&gt;Create Our Folder Structure&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;There’s a certain folder structure that Jekyll looks for in your repo. For example, all posts must live in the ‘_posts’ folder and must be titled like YEAR-MONTH-DAY-TITLE.FORMAT. To help understand, the title of this post is 2014-09-06-creating-a-blog-1.md. Anyways, I wanted to get up and running with the absolute basic amount of stuff needed in my repo so here’s what seemed to work.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Change into your repo directory in a terminal. Create two directories, _layouts and _posts. They must be named exactly that, including the underscore at the front. Issue &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir _layouts _posts&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Let’s also touch a couple of files that we’ll use later on. Issue &lt;code class=&quot;highlighter-rouge&quot;&gt;touch _config.yml index.html&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;configure-the-site&quot;&gt;&lt;strong&gt;Configure The Site&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;We could probably do this part much later in the tutorial, but let’s go ahead and put some basic info about our site in the _config.yml file. Feel free to edit these fields to your liking, with the exception of the ‘highlighter’ option. That is for our code highlighting.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;name: &quot;Test Blog&quot;

description: &quot;A snazzy new blog, just for me!&quot;

about: &quot;Here&#39;s a bit of text that we&#39;ll put in an about section later on in our tutorial. I&#39;m intentionally making it a little longer so that the section will look fuller later...&quot;

highlighter: pygments&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;test-our-local-server&quot;&gt;&lt;strong&gt;Test Our Local Server&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Now, what’s a tutorial without a “Hello, World!” portion? Let’s go ahead and edit index.html to say that. The “Hello, World!” text should be the only thing in the file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the root of your repo, let’s tell Jekyll to server our pages so we can see if everything works. Issue &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve --watch&lt;/code&gt;. The watch flag will monitor the repo for changed files and regenerate automatically, so you don’t have to start/stop the process. However, I’ve noticed that’s not the case for certain files, namely _config.yml. Your terminal should look something like this when you start the process:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Configuration file: /home/rsmitty/Desktop/rsmitty.github.io/_config.yml
            Source: /home/rsmitty/Desktop/rsmitty.github.io
       Destination: /home/rsmitty/Desktop/rsmitty.github.io/_site
      Generating...
                    &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;.
 Auto-regeneration: enabled &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/home/rsmitty/Desktop/rsmitty.github.io&#39;&lt;/span&gt;
Configuration file: /home/rsmitty/Desktop/rsmitty.github.io/_config.yml
    Server address: http://0.0.0.0:4000/
  Server running... press ctrl-c to stop.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Open the address http://localhost:4000 in a browser and you should see your “Hello, World!” text. Neat!
&lt;a href=&quot;/img/posts/2014-09-06-creating-a-blog-1/hello-world.png&quot;&gt;
&lt;img src=&quot;/img/posts/2014-09-06-creating-a-blog-1/hello-world.png&quot; style=&quot;max-width:100%; border:solid 1px;&quot; /&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;check-it-out-on-github&quot;&gt;&lt;strong&gt;Check It Out On Github&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Okay, so we’ve got our first official page. How do we get that out to Github? Turns out, it’s really easy, because we’ve already got everything laid out just right locally.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Add all of our files to be commited: &lt;code class=&quot;highlighter-rouge&quot;&gt;git add --all&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Commit them with a helpful message: &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;Committing basic folder structure and Hello World page.&quot;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Push it to Github: &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin master&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Give it a few seconds, and you should see your new page at your USERNAME.github.io address:
&lt;a href=&quot;/img/posts/2014-09-06-creating-a-blog-1/github-hello-world.png&quot;&gt;
&lt;img src=&quot;/img/posts/2014-09-06-creating-a-blog-1/github-hello-world.png&quot; style=&quot;max-width:100%; border:solid 1px;&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;closing&quot;&gt;&lt;strong&gt;Closing&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;That’s it for part one of this tutorial. We’ve now got a development environment setup and know how to push our pages to Github. In &lt;a href=&quot;../07/creating-a-blog-2.html&quot;&gt;part two&lt;/a&gt;, we’ll explore how to use Bootstrap to setup a blog layout and create some custom layout pages so that our site looks clean and user friendly.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/creating-a-blog-1/&quot;&gt;Creating A Blog With Github Pages, Jekyll, And Bootstrap - Part 1&lt;/a&gt; was originally published by Spencer Smith at &lt;a href=&quot;&quot;&gt;Spencer's Blog&lt;/a&gt; on September 06, 2014.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Aaaaand We're Back...]]></title>
 <link rel="alternate" type="text/html" href="/and-were-back/" />
  <id>/and-were-back</id>
  <published>2014-09-06T00:00:00-04:00</published>
  <updated>2014-09-06T00:00:00-04:00</updated>
  <author>
    <name>Spencer Smith</name>
    <uri></uri>
    <email>robertspencersmith@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Welp, after a long time away from anything blog related, I’ve decided to spin up a new site to start trying to keep better documentation of the stuff I do personally. A friend of mine asked about my old blog last week and, after telling me that he had liked to read it, I decided that maybe now was as good a time as any to get back into the swing of things. Life has changed quite a bit since the old entries I had made on my previous site, so the focus of my write-ups here will be pretty drastically different.&lt;/p&gt;

&lt;p&gt;I had originally stopped writing mainly because, as graduation neared at Clemson, I was short on time and frantically trying to find a job to transition to ASAP. I also didn’t want to pay yearly for a domain name and to host my site somewhere. So in getting back into this, I have made the transition to Github Pages as a free spot to host my stuff. Pages uses the Jekyll framework to host static sites, which sounded like a neat platform to try out. This has also given me a chance to use git in a different way and learn the markdown syntax. I hope that I’ll be able to expand on these skills more in the future.&lt;/p&gt;

&lt;p&gt;As for most of my new posts, they’ll probably center around the creation of this site (it took me a while to figure out the simplest path forward for Jekyll + Bootstrap), Linux system administration, OpenStack oddities and how-tos, and automation tools like Chef and Ansible. Finally, in regards to my older stuff, I was able to dig the old site out of the archive.org Wayback Machine (hooray for not keeping backups), so I’ve ported a few of the ones that were still somewhat interesting to this site.&lt;/p&gt;

&lt;p&gt;Hope you like it!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/and-were-back/&quot;&gt;Aaaaand We&#39;re Back...&lt;/a&gt; was originally published by Spencer Smith at &lt;a href=&quot;&quot;&gt;Spencer's Blog&lt;/a&gt; on September 06, 2014.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Greyscale Image Converter in Python]]></title>
 <link rel="alternate" type="text/html" href="/greyscale-image-converter-in-python/" />
  <id>/greyscale-image-converter-in-python</id>
  <published>2010-03-22T00:00:00-04:00</published>
  <updated>2010-03-22T00:00:00-04:00</updated>
  <author>
    <name>Spencer Smith</name>
    <uri></uri>
    <email>robertspencersmith@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Back in CPSC 101, we did a lot of image editing. We only used PPM images in class and I was thinking the other day about how even though I hated the project at the time, it was pretty interesting. So, I decided to re-code some of it in Python. Basically, all I’ve done is written a script that will allow the conversion of any color PPM image into greyscale. I feel like this can be pretty handy, as it’s fast and seems to do a pretty good job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s the before image (Ironically, I had to convert to another image format before posting):&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/2010-03-2-greyscale-image-converter-in-python/color-pic.jpg&quot; alt=&quot;alt text&quot; title=&quot;Color Nature Pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And here’s the output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/2010-03-2-greyscale-image-converter-in-python/bw-pic.jpg&quot; alt=&quot;alt text&quot; title=&quot;BW Nature Pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A few particulars about the files and scripts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I used the P3 header, which is easier because it allows you just to write ASCII into the file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Also, you must ensure that the header of the input photo must only have 3 lines. I’ve found that if you convert a JPEG from Gimp, it adds its on line in the header. It was easy to just do ‘nano in.ppm’ in terminal and remove the line they put in.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The script can be run using ‘python grey.py &amp;lt;input filename&amp;gt;’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This ONLY works on PPM images. Maybe someday I’ll look into another image format.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that’s it!&lt;/p&gt;

&lt;p&gt;Here’s the code, check it out:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#Greyscale Converter&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Spencer Smith&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Mar. 22, 2010&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#Open file&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#Read input file&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;indata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#Strip header&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#Open output image&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GREY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;out_grey.ppm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#Write header to output image&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P3&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;255&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#Calculate and write RGB values&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val3&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#Close files&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GREY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


    &lt;p&gt;&lt;a href=&quot;/greyscale-image-converter-in-python/&quot;&gt;Greyscale Image Converter in Python&lt;/a&gt; was originally published by Spencer Smith at &lt;a href=&quot;&quot;&gt;Spencer's Blog&lt;/a&gt; on March 22, 2010.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Warehouse Inventory With Python]]></title>
 <link rel="alternate" type="text/html" href="/warehouse-inventory-with-python/" />
  <id>/warehouse-inventory-with-python</id>
  <published>2010-03-10T00:00:00-05:00</published>
  <updated>2010-03-10T00:00:00-05:00</updated>
  <author>
    <name>Spencer Smith</name>
    <uri></uri>
    <email>robertspencersmith@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Hi all,&lt;/p&gt;

&lt;p&gt;So this week, I’ve been in a crunch to get some last minute cash for spring break. My Dad had a little opportunity for me to write a Python script for him to use at the office. The back story is basically that the warehouse where he works has to take inventory using some sort of hand-held scanning devices.&lt;/p&gt;

&lt;p&gt;He wanted me to write a script that, when placed in a directory with any given number of output files from the devices, generates a document stating each file and how many cartons are in each pallet. Sounds like a perfect job for Python, right? Exactly right. It literally took me about 45 minutes to 1 hour and I had the thing completely off the ground running. I’ve decided to post it not so much because this exact program is really useful to anyone else, but because I definitely learned some cool I/O stuff while doing it.&lt;/p&gt;

&lt;p&gt;First, I think it’s useful to get an idea of how the files looked coming in. They were basically Wordpad documents generated by Windows CE and didn’t have much format to them. Here’s a little example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;m464.pwd
{\pwd2\ansi{\*\pwdcomment
************************************************************************
*
* This is a Microsoft WordPad document.
*
* For further details visit the Microsoft Windows CE web site, at
*         http://www.microsoft.com/windowsce
* Or search MSDN for &#39;Microsoft WordPad&#39;
*
************************************************************************
}\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fnil\fcharset0 Tahoma;}}
{\colortbl ;}
\viewkind4\uc1\pard\cf0\f0\fs22 008022376\par
008022375\par
008022379\par
008022380\par
008022381\par
\par
}
^@&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, It’s a little hard to decipher. Also, keep in mind that this is not a full file as I didn’t want to post 600 lines in there. Anywhere there is a ‘\par’, except for the lone one at the end, there is a carton in the warehouse. All I had to do was figure out a way to add.&lt;/p&gt;

&lt;p&gt;My program gave the following output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Inventory Count
Generated: 03/09/2010 21:45:37
------------------------------------------------
Filename           # of Cartons
------------------------------------------------
m468                602
m466                286
m461                144
m465                245
m464                199&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So, as you can see, it seems to work pretty well. I can also imagine this is WAY easier than counting by hand. So, here is the code that converts one to the other. Be sure to notice the usefulness of the calls like getcwd(), which proved to be awesome for finding all the files in the directory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#Spencer Smith&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Inventory Calculator&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Created 3/9/2010&lt;/span&gt;
 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#Name of output file&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;filename2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;inventory_count.txt&quot;&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#Get all files in current directory&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;total_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getcwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pwd_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#Find all files with &#39;.pwd&#39; extension&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.pwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;pwd_files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#Return error to &#39;error.log&#39; if there are no &#39;.pwd&#39; files in the directory&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pwd_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error.log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;m/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Y &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;H:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;M:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;S&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; -- No files &#39;.pwd&#39; files in directory to read.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#Open output file for writing&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#Create header&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Inventory Count&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Generated: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;m/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Y &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;H:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;M:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;S&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;------------------------------------------------&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Filename           # of Cartons&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;------------------------------------------------&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#Iterate through available &#39;.pwd&#39; files&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwd_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#Open file for reading&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;suffix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;par&quot;&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#Search each line for &quot;\par&quot;. &quot;\par&quot; on the line means that there is a carton on this line.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Increment carton counter if found&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#After reading all lines in file, write filename and count to output file.&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s                &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Close current file and reset.&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#Close output file so that it can be read.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Enjoy! Hope someone finds it useful!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/warehouse-inventory-with-python/&quot;&gt;Warehouse Inventory With Python&lt;/a&gt; was originally published by Spencer Smith at &lt;a href=&quot;&quot;&gt;Spencer's Blog&lt;/a&gt; on March 10, 2010.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[MD5 Password Cracker In Python]]></title>
 <link rel="alternate" type="text/html" href="/MD5-password-cracker-in-python/" />
  <id>/MD5-password-cracker-in-python</id>
  <published>2010-02-16T00:00:00-05:00</published>
  <updated>2010-02-16T00:00:00-05:00</updated>
  <author>
    <name>Spencer Smith</name>
    <uri></uri>
    <email>robertspencersmith@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;I am in a Distributed Computing class this semester. We just had to write a brute-force password cracker using the Condor grid we have on-campus. It really took forever to generate an 8 character (a-z) code even though I ran it 676 different times. Total run-time was about 25 minutes. Anyways, we also had to create a password cracker using a dictionary file. I thought this was an awesome project and it was so much faster! I’ve decided to post the dictionary Python script. It should crack any word, given that it is in whatever dictionary you choose to use it against. My word for the project was “schnecke”, which is German for “snail”. Knowing that, I checked it against the Ubuntu New German dictionary. The run-time was ~.3 secs.&lt;/p&gt;

&lt;p&gt;Check it out!&lt;/p&gt;

&lt;p&gt;P.S. In order to get language dictionaries to check against in Ubuntu, it is as easy as “apt-get install ngerman” or whatever language package you need. I found a list of these packages with a quick Google search. If you’re doing more evil than good, you can also easily find a list of “common passwords” in text form.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#Spencer Smith&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#dict_crack.py&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Usage: python dict_crack.py &amp;lt;md5 encrypted password&amp;gt; &amp;lt;dictionary path&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Example: python dict_crack.py ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#... 75d3d991f75c3bcbecbbcaa712baa678 /usr/shared/dict/ngerman&lt;/span&gt;
 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hashlib&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#start runtime clock&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#set md5 encrypted password from command line we are looking for&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;guess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;no solution found&quot;&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#open dictionary file&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;r&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#for each entry, generate md5 encryption and check ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ... against desired solution&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#cut off &#39;\n&#39; character&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#close dictionary file&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#stop time&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#calculate rough estimate of run-time&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;total runtime was -- &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; seconds and the answer was:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sol&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


    &lt;p&gt;&lt;a href=&quot;/MD5-password-cracker-in-python/&quot;&gt;MD5 Password Cracker In Python&lt;/a&gt; was originally published by Spencer Smith at &lt;a href=&quot;&quot;&gt;Spencer's Blog&lt;/a&gt; on February 16, 2010.&lt;/p&gt;
  </content>
</entry>

</feed>
